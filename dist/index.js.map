{"version":3,"file":"index.js","sources":["../src/Network/helpers/rpcFromConfig.ts","../src/Network/constants.ts","../node_modules/url/node_modules/punycode/punycode.js","../node_modules/url/util.js","../node_modules/querystring/decode.js","../node_modules/querystring/encode.js","../node_modules/querystring/index.js","../node_modules/url/url.js","../src/common.ts","../src/helpers/network_helper.ts","../src/Network/network.ts","../src/Network/providers/AVMWebSocketProvider.ts","../src/Network/providers/EVMWebSocketProvider.ts","../src/Network/providers/WebsocketProvider.ts","../src/errors.ts","../src/Asset/Erc20Token.ts","../src/Asset/Erc20.ts","../node_modules/events/events.js","../src/Network/eventEmitter.ts","../src/Network/helpers/aliasFromNetworkID.ts","../src/Network/helpers/idFromAlias.ts","../src/Network/index.ts","../src/Asset/Assets.ts","../src/History/api_helpers.ts","../src/helpers/address_helper.ts","../src/utils/utils.ts","../src/utils/number_utils.ts","../src/utils/fee_utils.ts","../src/utils/price_utils.ts","../src/utils/waitTxUtils.ts","../src/utils/sleep.ts","../src/History/history_helpers.ts","../src/History/utxo_helpers.ts","../src/History/base_tx_parser.ts","../src/History/importExportParser.ts","../src/History/parsers.ts","../src/History/evmParser.ts","../src/History/parsed_types.ts","../src/Wallet/EvmWalletReadonly.ts","../src/Wallet/EvmWallet.ts","../src/helpers/tx_helper.ts","../src/helpers/utxo_helper.ts","../src/UniversalTx/UniversalNode.ts","../src/UniversalTx/UniversalNodeX.ts","../src/UniversalTx/UniversalNodeP.ts","../src/UniversalTx/UniversalNodeC.ts","../src/UniversalTx/utils.ts","../src/helpers/gas_helper.ts","../src/Wallet/Wallet.ts","../src/Wallet/constants.ts","../src/Explorer/utils.ts","../src/Wallet/HdScanner.ts","../src/Wallet/HDWalletAbstract.ts","../src/Wallet/helpers/derivationHelper.ts","../src/Wallet/MnemonicWallet.ts","../src/Wallet/SingletonWallet.ts","../node_modules/bip32-path/index.js","../src/Wallet/LedgerWallet.ts","../src/Wallet/PublicMnemonicWallet.ts","../src/Keystore/Crypto.ts","../src/Keystore/keystore.ts"],"sourcesContent":["import { NetworkConfig } from '../types';\n\nexport function getRpcC(conf: NetworkConfig) {\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/C/rpc`;\n}\nexport function getRpcX(conf: NetworkConfig) {\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/X`;\n}\nexport function getRpcP(conf: NetworkConfig) {\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/P`;\n}\n","import { NetworkConfig } from './types';\nimport { Defaults } from '@zee-ava/avajs/dist/utils';\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\n\nexport const MainnetConfig: NetworkConfig = {\n    rawUrl: 'https://api.axc.network',\n    apiProtocol: 'https',\n    apiIp: 'api.axc.network',\n    apiPort: 443,\n    explorerURL: 'https://explorerapi.axc.network',\n    explorerSiteURL: 'https://explorer.axc.network',\n    networkID: 1,\n    // @ts-ignore\n    xChainID: Defaults.network[1]['X']['blockchainID'],\n    // @ts-ignore\n    pChainID: Defaults.network[1]['P']['blockchainID'],\n    // @ts-ignore\n    cChainID: Defaults.network[1]['C']['blockchainID'],\n    // @ts-ignore\n    evmChainID: Defaults.network[1]['C']['chainID'],\n    // @ts-ignore\n    axcID: Defaults.network[1]['X']['axcAssetID'],\n    get rpcUrl() {\n        return {\n            c: getRpcC(this),\n            p: getRpcP(this),\n            x: getRpcX(this),\n        };\n    },\n};\n\nexport const TestnetConfig: NetworkConfig = {\n    rawUrl: 'https://api.axc-test.network',\n    apiProtocol: 'https',\n    apiIp: 'api.axc-test.network',\n    apiPort: 443,\n    explorerURL: 'https://explorerapi.axc-test.network',\n    explorerSiteURL: 'https://explorer.axc-test.network',\n    networkID: 5,\n    // @ts-ignore\n    xChainID: Defaults.network[5]['X']['blockchainID'],\n    // @ts-ignore\n    pChainID: Defaults.network[5]['P']['blockchainID'],\n    // @ts-ignore\n    cChainID: Defaults.network[5]['C']['blockchainID'],\n    // @ts-ignore\n    evmChainID: Defaults.network[5]['C']['chainID'],\n    // @ts-ignore\n    axcID: Defaults.network[5]['X']['axcAssetID'],\n    get rpcUrl() {\n        return {\n            c: getRpcC(this),\n            p: getRpcP(this),\n            x: getRpcX(this),\n        };\n    },\n};\n\nexport const LocalnetConfig: NetworkConfig = {\n    rawUrl: 'http://localhost:9650',\n    apiProtocol: 'http',\n    apiIp: 'localhost',\n    apiPort: 9650,\n    networkID: 12345,\n    // @ts-ignore\n    xChainID: Defaults.network[12345]['X']['blockchainID'],\n    // @ts-ignore\n    pChainID: Defaults.network[12345]['P']['blockchainID'],\n    // @ts-ignore\n    cChainID: Defaults.network[12345]['C']['blockchainID'],\n    // @ts-ignore\n    evmChainID: Defaults.network[12345]['C']['chainID'],\n    // @ts-ignore\n    axcID: Defaults.network[12345]['X']['axcAssetID'],\n    get rpcUrl() {\n        return {\n            c: getRpcC(this),\n            p: getRpcP(this),\n            x: getRpcX(this),\n        };\n    },\n};\n\n// Default network connection\nexport const DefaultConfig = MainnetConfig;\n","/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","import { BinTools } from '@zee-ava/avajs';\n\nexport const bintools = BinTools.getInstance();\n","import { NetworkConfig } from '@/Network/types';\nimport axios from 'axios';\nimport { Axia } from '@zee-ava/avajs';\n\nexport function wsUrlFromConfigX(config: NetworkConfig): string {\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/X/events`;\n}\n\nexport function wsUrlFromConfigEVM(config: NetworkConfig): string {\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/C/ws`;\n}\n\n/**\n * Given the base url of an Axia API, requests the Network ID\n * @param url The base url for the Axia API\n */\nexport async function getNetworkIdFromURL(url: string): Promise<number> {\n    // TODO: Not be the best to assume /ext/info but Axiajs complicates things\n    let res = await axios.post(url + '/ext/info', {\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'info.getNetworkID',\n    });\n    return parseInt(res.data.result.networkID);\n}\n\nexport function createAxiaProvider(config: NetworkConfig) {\n    return new Axia(config.apiIp, config.apiPort, config.apiProtocol, config.networkID);\n}\n/**\n * Given a network configuration returns an Axios instance connected to the explorer\n */\nexport function createExplorerApi(networkConfig: NetworkConfig) {\n    if (!networkConfig.explorerURL) {\n        throw new Error('Network configuration does not specify an explorer API.');\n    }\n\n    return axios.create({\n        baseURL: networkConfig.explorerURL,\n        withCredentials: false,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n}\n\n/**\n * Checks if the given network accepts credentials.\n * This must be true to use cookies.\n */\nexport async function canUseCredentials(config: NetworkConfig): Promise<boolean> {\n    let provider = createAxiaProvider(config);\n    provider.setRequestConfig('withCredentials', true);\n\n    let infoApi = provider.Info();\n\n    // Make a dummy request with credentials\n    try {\n        await infoApi.getNetworkID();\n        return true;\n        // eslint-disable-next-line\n    } catch (e) {}\n\n    provider.setRequestConfig('withCredentials', false);\n\n    try {\n        await infoApi.getNetworkID();\n    } catch (e) {\n        throw new Error('Unable to connect.');\n    }\n\n    return false;\n}\n","import { Axia } from '@zee-ava/avajs/dist';\nimport { AVMAPI } from '@zee-ava/avajs/dist/apis/avm';\nimport { InfoAPI } from '@zee-ava/avajs/dist/apis/info';\nimport { EVMAPI } from '@zee-ava/avajs/dist/apis/evm';\nimport Web3 from 'web3';\nimport { DefaultConfig } from './constants';\nimport { NetworkConfig, NetworkConfigRpc, NetworkProtocolType } from './types';\nimport { AxiosInstance } from 'axios';\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\nimport URL from 'url';\nimport { bintools } from '@/common';\nimport {\n    canUseCredentials,\n    createAxiaProvider,\n    createExplorerApi,\n    getNetworkIdFromURL,\n} from '@/helpers/network_helper';\n\nexport const axia: Axia = createAxiaProvider(DefaultConfig);\n\nexport const xChain: AVMAPI = axia.XChain();\nexport const cChain: EVMAPI = axia.CChain();\nexport const pChain = axia.PChain();\nexport const infoApi: InfoAPI = axia.Info();\n\nfunction getProviderFromUrl(url: string, credentials = false) {\n    return new Web3.providers.HttpProvider(url, {\n        timeout: 20000,\n        withCredentials: credentials,\n    });\n}\n\nconst rpcUrl = getRpcC(DefaultConfig);\nexport const web3 = new Web3(getProviderFromUrl(rpcUrl, true));\n\nexport let explorer_api: AxiosInstance | null = null;\nexport let activeNetwork: NetworkConfig = DefaultConfig;\n\n/**\n * Returns the evm chain ID of the active network\n */\nexport function getEvmChainID(): number {\n    return activeNetwork.evmChainID;\n}\n\n/**\n * Similar to `setRpcNetwork`, but checks if credentials can be used with the api.\n * @param config\n */\nexport async function setRpcNetworkAsync(config: NetworkConfig): Promise<void> {\n    let credentials = await canUseCredentials(config);\n    setRpcNetwork(config, credentials);\n}\n\n/**\n * Changes the connected network of the SDK.\n * This is a synchronous call that does not do any network requests.\n * @param conf\n * @param credentials\n */\nexport function setRpcNetwork(conf: NetworkConfig, credentials = true): void {\n    axia.setAddress(conf.apiIp, conf.apiPort, conf.apiProtocol);\n    axia.setNetworkID(conf.networkID);\n\n    if (credentials) {\n        axia.setRequestConfig('withCredentials', credentials);\n    } else {\n        axia.removeRequestConfig('withCredentials');\n    }\n\n    xChain.refreshBlockchainID(conf.xChainID);\n    xChain.setBlockchainAlias('X');\n\n    pChain.refreshBlockchainID(conf.pChainID);\n    pChain.setBlockchainAlias('P');\n\n    cChain.refreshBlockchainID(conf.cChainID);\n    cChain.setBlockchainAlias('C');\n\n    xChain.setAXCAssetID(conf.axcID);\n    pChain.setAXCAssetID(conf.axcID);\n    cChain.setAXCAssetID(conf.axcID);\n\n    if (conf.explorerURL) {\n        explorer_api = createExplorerApi(conf);\n    } else {\n        explorer_api = null;\n    }\n\n    let rpcUrl = getRpcC(conf);\n    web3.setProvider(getProviderFromUrl(rpcUrl, credentials));\n\n    activeNetwork = conf;\n}\n\n/**\n * Given the base url for an Axia API, returns a NetworkConfig object.\n * @param url A string including protocol, base domain, and ports (if any). Ex: `http://localhost:9650`\n */\nexport async function getConfigFromUrl(url: string): Promise<NetworkConfig> {\n    let urlObj = URL.parse(url);\n    let portStr = urlObj.port;\n\n    if (!urlObj.hostname || !urlObj.protocol) throw new Error('Invalid url.');\n\n    if (!portStr) {\n        portStr = urlObj.protocol === 'http:' ? '80' : '443';\n    }\n\n    // get network ID\n    let netID = await getNetworkIdFromURL(url);\n    let protocol: NetworkProtocolType = urlObj.protocol === 'http:' ? 'http' : 'https';\n\n    let connection = new Axia(urlObj.hostname, parseInt(portStr), protocol, netID);\n    // TODO: Use a helper for this\n    let connectionEvm = new Web3(urlObj.href + 'ext/bc/C/rpc');\n\n    let infoApi = connection.Info();\n    let xApi = connection.XChain();\n\n    let fetchIdX = infoApi.getBlockchainID('X');\n    let fetchIdP = infoApi.getBlockchainID('P');\n    let fetchIdC = infoApi.getBlockchainID('C');\n    let fetchEvmChainID = connectionEvm.eth.getChainId();\n    let fetchAxcId = await xApi.getAXCAssetID();\n\n    let values = await Promise.all([fetchIdX, fetchIdP, fetchIdC, fetchAxcId, fetchEvmChainID]);\n\n    let idX = values[0];\n    let idP = values[1];\n    let idC = values[2];\n    let axcId = bintools.cb58Encode(values[3]);\n    let evmChainId = values[4];\n\n    let config: NetworkConfig = {\n        rawUrl: url,\n        apiProtocol: protocol,\n        apiIp: urlObj.hostname,\n        apiPort: parseInt(portStr),\n        networkID: netID,\n        xChainID: idX,\n        pChainID: idP,\n        cChainID: idC,\n        axcID: axcId,\n        evmChainID: evmChainId,\n        get rpcUrl(): NetworkConfigRpc {\n            return {\n                c: getRpcC(this),\n                p: getRpcP(this),\n                x: getRpcX(this),\n            };\n        },\n    };\n\n    return config;\n}\n","import Sockette from 'sockette';\nimport { PubSub } from '@zee-ava/avajs';\nimport { WalletType } from '@/Wallet/types';\n\nconst FILTER_ADDRESS_SIZE = 1000;\n\nexport default class AVMWebSocketProvider {\n    isConnected = false;\n    socket: Sockette;\n\n    wallets: WalletType[] = [];\n    boundHandler: any;\n\n    constructor(wsUrl: string) {\n        this.boundHandler = () => this.onWalletAddressChange();\n        this.socket = new Sockette(wsUrl, {\n            onopen: () => {\n                this.onOpen();\n            },\n            onclose: () => {\n                this.onClose();\n            },\n            onmessage: () => {\n                this.onMessage();\n            },\n            onerror: () => {\n                this.onError();\n            },\n        });\n    }\n\n    /**\n     * Starts watching for transactions on this wallet.\n     * @param wallet The wallet instance to track\n     */\n    trackWallet(wallet: WalletType): void {\n        if (this.wallets.includes(wallet)) {\n            return;\n        }\n        this.wallets.push(wallet);\n\n        wallet.on('addressChanged', this.boundHandler);\n        this.updateFilterAddresses();\n    }\n\n    onWalletAddressChange(): void {\n        this.updateFilterAddresses();\n    }\n\n    removeWallet(w: WalletType): void {\n        if (!this.wallets.includes(w)) {\n            return;\n        }\n\n        let index = this.wallets.indexOf(w);\n        this.wallets.splice(index, 1);\n        w.off('addressChanged', this.boundHandler);\n    }\n\n    setEndpoint(wsUrl: string): void {\n        this.socket.close();\n\n        this.socket = new Sockette(wsUrl, {\n            onopen: () => {\n                this.onOpen();\n            },\n            onclose: () => {\n                this.onClose();\n            },\n            onmessage: () => {\n                this.onMessage();\n            },\n            onerror: () => {\n                this.onError();\n            },\n        });\n    }\n\n    // Clears the filter listening to X chain transactions\n    clearFilter(): void {\n        let pubsub = new PubSub();\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\n        this.socket.send(bloom);\n    }\n\n    /**\n     * Creates a bloom filter from the addresses of the tracked wallets and subscribes to\n     * transactions on the node.\n     */\n    updateFilterAddresses() {\n        if (!this.isConnected) {\n            return;\n        }\n\n        let wallets = this.wallets;\n\n        let addrs = [];\n        for (let i = 0; i < wallets.length; i++) {\n            let w = wallets[i];\n            let externalAddrs = w.getExternalAddressesXSync();\n            let addrsLen = externalAddrs.length;\n            let startIndex = Math.max(0, addrsLen - FILTER_ADDRESS_SIZE);\n            let addAddrs = externalAddrs.slice(startIndex);\n            addrs.push(...addAddrs);\n        }\n\n        let pubsub = new PubSub();\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\n        this.socket.send(bloom);\n\n        // Divide addresses by 100 and send multiple messages\n        // There is a max msg size ~10kb\n        const GROUP_AMOUNT = 100;\n        let index = 0;\n        while (index < addrs.length) {\n            let chunk = addrs.slice(index, index + GROUP_AMOUNT);\n            let addAddrs = pubsub.addAddresses(chunk);\n            this.socket.send(addAddrs);\n            index += GROUP_AMOUNT;\n        }\n    }\n\n    private updateWalletBalanceX() {\n        this.wallets.forEach((w) => {\n            w.updateUtxosX();\n        });\n    }\n\n    private onOpen() {\n        this.isConnected = true;\n        this.updateFilterAddresses();\n    }\n\n    private onMessage() {\n        this.updateWalletBalanceX();\n    }\n\n    private onClose() {\n        this.isConnected = false;\n    }\n\n    private onError() {}\n}\n","import { ethers } from 'ethers';\nimport { WalletType } from '@/Wallet/types';\n\nconst SOCKET_RECONNECT_TIMEOUT = 1000;\n\nexport default class EVMWebSocketProvider {\n    provider: ethers.providers.WebSocketProvider;\n    wsUrl: string;\n    wallets: WalletType[] = [];\n\n    constructor(wsUrl: string) {\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\n        this.provider = provider;\n        this.wsUrl = wsUrl;\n\n        this.addListeners();\n    }\n\n    setEndpoint(wsUrl: string): void {\n        this.destroyConnection();\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\n        this.provider = provider;\n        this.wsUrl = wsUrl;\n\n        this.addListeners();\n    }\n\n    trackWallet(wallet: WalletType): void {\n        if (this.wallets.includes(wallet)) {\n            return;\n        }\n\n        this.wallets.push(wallet);\n    }\n\n    removeWallet(wallet: WalletType): void {\n        if (!this.wallets.includes(wallet)) {\n            return;\n        }\n\n        let index = this.wallets.indexOf(wallet);\n        this.wallets.splice(index, 1);\n    }\n\n    async destroyConnection(): Promise<void> {\n        this.provider._websocket.onclose = () => {};\n        await this.provider.destroy();\n    }\n\n    async reconnect(): Promise<void> {\n        // Clear the current onclose handler so that we dont attempt a reconnection\n        await this.destroyConnection();\n        let wsProvider = new ethers.providers.WebSocketProvider(this.wsUrl);\n        this.provider = wsProvider;\n    }\n\n    private addListeners() {\n        let provider = this.provider;\n\n        provider.on('block', () => {\n            this.onBlock();\n        });\n\n        // Save default function so we can keep calling it\n        let defaultOnOpen = provider._websocket.onopen;\n        let defaultOnClose = provider._websocket.onclose;\n\n        provider._websocket.onopen = (ev: any) => {\n            if (defaultOnOpen) defaultOnOpen(ev);\n        };\n\n        provider._websocket.onclose = (ev: any) => {\n            if (defaultOnClose) defaultOnClose(ev);\n\n            setTimeout(() => {\n                this.reconnect();\n            }, SOCKET_RECONNECT_TIMEOUT);\n        };\n    }\n\n    private removeListeners() {\n        this.provider.off('block', this.onBlock);\n    }\n\n    private onBlock() {\n        // Update wallet balances\n        this.wallets.forEach((w) => {\n            w.updateAxcBalanceC();\n        });\n    }\n}\n","import AVMWebSocketProvider from '@/Network/providers/AVMWebSocketProvider';\nimport EVMWebSocketProvider from '@/Network/providers/EVMWebSocketProvider';\nimport { WalletType } from '@/Wallet/types';\nimport { NetworkConfig } from '@/Network/types';\nimport { wsUrlFromConfigEVM, wsUrlFromConfigX } from '@/helpers/network_helper';\nimport { activeNetwork } from '@/Network/network';\n\nexport default class WebsocketProvider {\n    avmProvider: AVMWebSocketProvider;\n    evmProvider: EVMWebSocketProvider;\n\n    constructor(avmEndpoint: string, evmEndpoint: string) {\n        this.avmProvider = new AVMWebSocketProvider(avmEndpoint);\n        this.evmProvider = new EVMWebSocketProvider(evmEndpoint);\n    }\n\n    static fromActiveNetwork(): WebsocketProvider {\n        return WebsocketProvider.fromNetworkConfig(activeNetwork);\n    }\n\n    static fromNetworkConfig(config: NetworkConfig): WebsocketProvider {\n        let evm = wsUrlFromConfigEVM(config);\n        let avm = wsUrlFromConfigX(config);\n        return new WebsocketProvider(avm, evm);\n    }\n\n    public setEndpoints(avmEndpoint: string, evmEndpoint: string): void {\n        this.avmProvider.setEndpoint(avmEndpoint);\n        this.evmProvider.setEndpoint(evmEndpoint);\n    }\n\n    public setNetwork(config: NetworkConfig): void {\n        let evm = wsUrlFromConfigEVM(config);\n        let avm = wsUrlFromConfigX(config);\n        this.setEndpoints(avm, evm);\n    }\n\n    public trackWallet(wallet: WalletType): void {\n        this.avmProvider.trackWallet(wallet);\n        this.evmProvider.trackWallet(wallet);\n    }\n\n    public removeWallet(wallet: WalletType): void {\n        this.avmProvider.removeWallet(wallet);\n        this.evmProvider.removeWallet(wallet);\n    }\n}\n","export const NO_NETWORK = new Error('No network selected.');\nexport const NO_EXPLORER_API = new Error('Explorer API not found.');\n","import { activeNetwork, web3 } from '@/Network/network';\nimport ERC20Abi from '@openzeppelin/contracts/build/contracts/ERC20.json';\nimport { Erc20TokenData } from '@/Asset/types';\nimport { NO_NETWORK } from '@/errors';\nimport { BN } from '@zee-ava/avajs';\nimport { Contract } from 'web3-eth-contract';\nimport xss from 'xss';\nexport default class Erc20Token {\n    contract: Contract;\n    address: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n    chainId: number;\n    data: Erc20TokenData;\n\n    constructor(data: Erc20TokenData) {\n        this.name = xss(data.name);\n        this.symbol = xss(data.symbol);\n        this.address = data.address;\n        this.decimals = data.decimals;\n        this.chainId = data.chainId;\n        this.data = data;\n\n        //@ts-ignore\n        this.contract = new web3.eth.Contract(ERC20Abi.abi, data.address);\n    }\n\n    toData(): Erc20TokenData {\n        return this.data;\n    }\n\n    static async getData(address: string): Promise<Erc20TokenData> {\n        //@ts-ignore\n        let contract = new web3.eth.Contract(ERC20Abi.abi, address);\n\n        let contractCalls = await Promise.all([\n            contract.methods.name().call(),\n            contract.methods.symbol().call(),\n            contract.methods.decimals().call(),\n        ]);\n        // Purify the values for XSS protection\n        let name = xss(contractCalls[0]);\n        let symbol = xss(contractCalls[1]);\n        let decimals = parseInt(contractCalls[2]);\n\n        if (!activeNetwork) {\n            throw NO_NETWORK;\n        }\n\n        return {\n            name,\n            symbol,\n            decimals,\n            address,\n            chainId: activeNetwork.evmChainID,\n        };\n    }\n\n    async balanceOf(address: string): Promise<BN> {\n        let bal = await this.contract.methods.balanceOf(address).call();\n        return new BN(bal);\n    }\n}\n","import { Erc20Store, Erc20TokenData } from '@/Asset/types';\nimport Erc20Token from '@/Asset/Erc20Token';\n\nexport let erc20Cache: Erc20Store = {};\n\nexport function getErc20Cache(): Erc20Store {\n    return {\n        ...erc20Cache,\n    };\n}\n\n/**\n * Clears the internal erc20 cache.\n */\nexport function bustErc20Cache() {\n    erc20Cache = {};\n}\n\n/**\n * Fetches ERC20 data from the given contract address and adds the token to the given store.\n * @param address ERC20 Contract address\n */\nasync function addErc20Token(address: string): Promise<Erc20Token> {\n    let existing = erc20Cache[address];\n    if (existing) {\n        return existing;\n    }\n\n    try {\n        let data: Erc20TokenData = await Erc20Token.getData(address);\n        let token = new Erc20Token(data);\n\n        erc20Cache[address] = token;\n        return token;\n    } catch (e) {\n        throw new Error('Unable to add ERC20 contract.');\n    }\n}\n\n/**\n * Initates and caches an erc20 token from the given data.\n * @param data Information such as name, symbol, and address about the ERC20 token.\n */\nexport function addErc20TokenFromData(data: Erc20TokenData): Erc20Token {\n    let address = data.address;\n    let existing = erc20Cache[address];\n    if (existing) {\n        return existing;\n    }\n\n    let token = new Erc20Token(data);\n    erc20Cache[address] = token;\n    return token;\n}\n\nexport async function getContractDataErc20(address: string): Promise<Erc20TokenData> {\n    try {\n        let data: Erc20TokenData = await Erc20Token.getData(address);\n        return data;\n    } catch (e) {\n        throw new Error(`ERC20 contract ${address} does not exist.`);\n    }\n}\n\nexport async function getErc20Token(address: string): Promise<Erc20Token> {\n    let storeItem = erc20Cache[address];\n    if (storeItem) {\n        return storeItem;\n    } else {\n        return await addErc20Token(address);\n    }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","import { NetworkConfig } from '@/Network/types';\nimport EventEmitter from 'events';\n\n/**\n * Fire network change event\n * @param newNetwork The newly connected network config\n */\nexport function emitNetworkChange(newNetwork: NetworkConfig) {\n    networkEvents.emit('network_change', newNetwork);\n}\n\nexport const networkEvents: EventEmitter = new EventEmitter();\n","import { ChainIdType } from '@/types';\nimport { activeNetwork } from '@/Network/network';\n\n/**\n * Given the chain ID returns the chain alias\n * @param id Chain id\n */\nexport function idToChainAlias(id: string): ChainIdType {\n    if (id === activeNetwork.xChainID) {\n        return 'X';\n    } else if (id === activeNetwork.pChainID) {\n        return 'P';\n    } else if (id === activeNetwork.cChainID) {\n        return 'C';\n    }\n    throw new Error('Unknown chain ID.');\n}\n","import { ChainIdType } from '@/types';\nimport { cChain, pChain, xChain } from '@/Network/network';\n\n/**\n * Given a chain alias, returns the chain id.\n * @param alias `X`, `P` or `C`\n */\nexport function chainIdFromAlias(alias: ChainIdType) {\n    if (alias === 'X') {\n        return xChain.getBlockchainID();\n    } else if (alias === 'P') {\n        return pChain.getBlockchainID();\n    } else if (alias === 'C') {\n        return cChain.getBlockchainID();\n    }\n    throw new Error('Unknown chain alias.');\n}\n","import { NetworkConfig } from './types';\nimport { MainnetConfig, TestnetConfig, LocalnetConfig } from '@/Network/constants';\nimport { activeNetwork, setRpcNetwork, getEvmChainID, getConfigFromUrl, setRpcNetworkAsync } from '@/Network/network';\nimport WebsocketProvider from '@/Network/providers/WebsocketProvider';\nimport { bustErc20Cache } from '@/Asset/Erc20';\nimport { emitNetworkChange } from '@/Network/eventEmitter';\n\nexport function setNetwork(conf: NetworkConfig) {\n    setRpcNetwork(conf);\n    emitNetworkChange(conf);\n    bustErc20Cache();\n}\n\n/**\n * Unlike `setNetwork` this function will fail if the network is not available.\n * @param conf\n */\nexport async function setNetworkAsync(conf: NetworkConfig) {\n    await setRpcNetworkAsync(conf);\n    emitNetworkChange(conf);\n    bustErc20Cache();\n}\n\nexport function isFujiNetwork(activeNetwork: NetworkConfig) {\n    return activeNetwork.networkID === TestnetConfig.networkID;\n}\n\nexport function isMainnetNetwork(activeNetwork: NetworkConfig) {\n    return activeNetwork.networkID === MainnetConfig.networkID;\n}\n\nexport function isLocalNetwork(activeNetwork: NetworkConfig) {\n    return activeNetwork.networkID === LocalnetConfig.networkID;\n}\n\n// Default connection is Mainnet\nsetNetwork(MainnetConfig);\n\nexport function getAxcAssetID() {\n    return activeNetwork.axcID;\n}\n\nexport function getActiveNetworkConfig() {\n    return activeNetwork;\n}\n\nexport { WebsocketProvider, getEvmChainID, getConfigFromUrl };\n\nexport { NetworkConfig } from './types';\nexport * from './helpers';\n","import { xChain } from '@/Network/network';\n\nimport { iAssetCache, iAssetDescriptionClean } from '@/Asset/types';\nimport xss from 'xss';\nlet assetCache: iAssetCache = {};\n\nexport function getAssetDescriptionSync(assetId: string): iAssetDescriptionClean {\n    if (typeof assetCache[assetId] === 'undefined') throw new Error(`Asset ID ${assetId} is not known.`);\n    return assetCache[assetId];\n}\n\n/**\n * Uses the node api to get meta data given an asset ID. Saves the result to cache.\n * @param assetId\n */\nexport async function getAssetDescription(assetId: string): Promise<iAssetDescriptionClean> {\n    let cache = assetCache[assetId];\n    if (cache) {\n        return cache;\n    }\n\n    try {\n        let res = await xChain.getAssetDescription(assetId);\n        let clean: iAssetDescriptionClean = {\n            ...res,\n            assetID: assetId,\n            name: xss(res.name),\n            symbol: xss(res.symbol),\n        };\n\n        assetCache[assetId] = clean;\n        return clean;\n    } catch (e) {\n        throw new Error(`Asset ${assetId} does not exist.`);\n    }\n}\n","import { ITransactionData, ITransactionDataEVM } from '@/History/raw_types';\nimport { explorer_api } from '@/Network/network';\nimport { NO_EXPLORER_API } from '@/errors';\nimport { ChainIdType } from '@/types';\n\n/**\n * Returns transactions FROM and TO the address given\n * @param addr The address to get historic transactions for.\n */\nexport async function getAddressHistoryEVM(addr: string): Promise<ITransactionDataEVM[]> {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let endpoint = `v2/ctransactions?address=${addr}`;\n    let data: ITransactionDataEVM[] = (await explorer_api.get(endpoint)).data.Transactions;\n\n    data.sort((a, b) => {\n        let dateA = new Date(a.createdAt);\n        let dateB = new Date(b.createdAt);\n\n        return dateB.getTime() - dateA.getTime();\n    });\n\n    return data;\n}\n\nexport async function getAddressHistory(\n    addrs: string[],\n    limit = 20,\n    chainID: string,\n    endTime?: string\n): Promise<ITransactionData[]> {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    const ADDR_SIZE = 1024;\n    let selection = addrs.slice(0, ADDR_SIZE);\n    let remaining = addrs.slice(ADDR_SIZE);\n\n    let addrsRaw = selection.map((addr) => {\n        return addr.split('-')[1];\n    });\n\n    let rootUrl = 'v2/transactions';\n\n    let req = {\n        address: addrsRaw,\n        sort: ['timestamp-desc'],\n        disableCount: ['1'],\n        chainID: [chainID],\n        disableGenesis: ['false'],\n    };\n\n    if (limit > 0) {\n        //@ts-ignore\n        req.limit = [limit.toString()];\n    }\n\n    if (endTime) {\n        //@ts-ignore\n        req.endTime = [endTime];\n    }\n\n    let res = await explorer_api.post(rootUrl, req);\n    let txs = res.data.transactions;\n    let next: string | undefined = res.data.next;\n\n    if (txs === null) txs = [];\n\n    // If we need to fetch more for this address\n    if (next && !limit) {\n        let endTime = next.split('&')[0].split('=')[1];\n        let nextRes = await getAddressHistory(selection, limit, chainID, endTime);\n        txs.push(...nextRes);\n    }\n\n    // If there are addresses left, fetch them too\n    // TODO: Do this in parallel, not recursive\n    if (remaining.length > 0) {\n        let nextRes = await getAddressHistory(remaining, limit, chainID);\n        txs.push(...nextRes);\n    }\n\n    return txs;\n}\n\n/**\n * Returns the ortelius data from the given tx id.\n * @param txID\n */\nexport async function getTx(txID: string): Promise<ITransactionData> {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let url = `v2/transactions/${txID}`;\n    let res = await explorer_api.get(url);\n    return res.data;\n}\n\n/**\n * Returns ortelius data for a transaction hash on C chain EVM,\n * @param txHash\n */\nexport async function getTxEvm(txHash: string): Promise<ITransactionDataEVM> {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let endpoint = `v2/ctransactions?hash=${txHash}`;\n    let data: ITransactionDataEVM = (await explorer_api.get(endpoint)).data.Transactions[0];\n\n    return data;\n}\n","import { ChainIdType } from '@/types';\nimport Web3 from 'web3';\nimport { bintools } from '@/common';\n\nexport const validateAddress = (address: string): boolean | string => {\n    return validateAddressX(address) || validateAddressP(address) || validateAddressEVM(address);\n};\n\nexport function validateAddressX(address: string) {\n    try {\n        let buff = bintools.parseAddress(address, 'X');\n        if (!buff) return false;\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\n\nexport function validateAddressP(address: string) {\n    try {\n        let buff = bintools.parseAddress(address, 'P');\n        if (!buff) return false;\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\n\nexport function validateAddressEVM(address: string) {\n    return Web3.utils.isAddress(address);\n}\n\n/**\n * Returns the human readable part of a X or P bech32 address.\n * @param address\n */\nexport function getAddressHRP(address: string): string {\n    if (!validateAddress(address)) {\n        throw new Error('Invalid X or P address.');\n    }\n    return address.split('-')[1].split('1')[0];\n}\n\n/**\n * Given an address, return which Chain it belongs to\n * @param address\n */\nexport function getAddressChain(address: string): ChainIdType {\n    if (!validateAddress(address)) {\n        throw new Error('Invalid address.');\n    }\n\n    if (Web3.utils.isAddress(address)) {\n        return 'C';\n    } else {\n        return address[0] as ChainIdType;\n    }\n}\n","import { Buffer as BufferAxia } from '@zee-ava/avajs';\nimport { validateAddress } from '@/helpers/address_helper';\nimport createHash from 'create-hash';\nimport { PayloadBase, PayloadTypes } from '@zee-ava/avajs/dist/utils';\n\n/**\n * Checks if address is valid.\n *\n * @return\n * boolean if address is valid, error message if not valid.\n */\nexport function isValidAddress(address: string): boolean {\n    return validateAddress(address) === true;\n}\n\nexport function digestMessage(msgStr: string): Buffer {\n    let mBuf = Buffer.from(msgStr, 'utf8');\n    let msgSize = Buffer.alloc(4);\n    msgSize.writeUInt32BE(mBuf.length, 0);\n    let msgBuf = Buffer.from(`\\x1AAxia Signed Message:\\n${msgSize}${msgStr}`, 'utf8');\n    return createHash('sha256').update(msgBuf).digest();\n}\n\nlet payloadtypes = PayloadTypes.getInstance();\n\nexport function parseNftPayload(rawPayload: string): PayloadBase {\n    let payload = BufferAxia.from(rawPayload, 'base64');\n    payload = BufferAxia.concat([new BufferAxia(4).fill(payload.length), payload]);\n\n    let typeId = payloadtypes.getTypeID(payload);\n    let pl: BufferAxia = payloadtypes.getContent(payload);\n    let payloadbase: PayloadBase = payloadtypes.select(typeId, pl);\n\n    return payloadbase;\n}\n","import { BN } from '@zee-ava/avajs';\nimport Big from 'big.js';\n\ndeclare module 'big.js' {\n    interface Big {\n        toLocaleString(toFixed?: number): string;\n    }\n}\n\nBig.prototype.toLocaleString = function (toFixed: number = 9) {\n    let fixedStr = this.toFixed(toFixed, 0);\n    let split = fixedStr.split('.');\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\n\n    if (split.length === 1) {\n        return wholeStr;\n    } else {\n        let remainderStr = split[1];\n\n        // remove trailing 0s\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\n        while (lastChar === '0') {\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\n        }\n\n        let trimmed = remainderStr.substring(0, toFixed);\n        if (!trimmed) return wholeStr;\n        return `${wholeStr}.${trimmed}`;\n    }\n};\n\n/**\n * @param val the amount to parse\n * @param denomination number of decimal places to parse with\n */\nexport function bnToBig(val: BN, denomination = 0): Big {\n    let mult = Big(10).pow(denomination);\n    return new Big(val.toString()).div(mult);\n}\n\n/**\n * Converts a BN amount of 18 decimals to 9.\n * Used for AXC C <-> X,P conversions\n * @param amount\n */\nexport function axcCtoX(amount: BN) {\n    let tens = new BN(10).pow(new BN(9));\n    return amount.div(tens);\n}\n\nexport function axcXtoC(amount: BN) {\n    let tens = new BN(10).pow(new BN(9));\n    return amount.mul(tens);\n}\n\nexport function axcPtoC(amount: BN) {\n    return axcXtoC(amount);\n}\n\nexport function bnToBigAxcX(val: BN): Big {\n    return bnToBig(val, 9);\n}\n\nexport function bnToBigAxcP(val: BN): Big {\n    return bnToBigAxcX(val);\n}\n\nexport function bnToBigAxcC(val: BN): Big {\n    return bnToBig(val, 18);\n}\n\n/**\n * Parses the value using a denomination of 18\n *\n * @param val the amount to parse given in WEI\n *\n * @example\n * ```\n * bnToAxcC(new BN('22500000000000000000')\n * // will return  22.5\n *```\n *\n */\nexport function bnToAxcC(val: BN): string {\n    return bnToLocaleString(val, 18);\n}\n\n/**\n * Parses the value using a denomination of 9\n *\n * @param val the amount to parse given in nAXC\n */\nexport function bnToAxcX(val: BN): string {\n    return bnToLocaleString(val, 9);\n}\n\n/**\n * Parses the value using a denomination of 9\n *\n * @param val the amount to parse given in nAXC\n */\nexport function bnToAxcP(val: BN): string {\n    return bnToAxcX(val);\n}\n\n/**\n *\n * @param val the number to parse\n * @param decimals number of decimal places used to parse the number\n */\nexport function numberToBN(val: number | string, decimals: number): BN {\n    let valBig = Big(val);\n    let tens = Big(10).pow(decimals);\n    let valBN = new BN(valBig.times(tens).toFixed(0));\n    return valBN;\n}\n\nexport function numberToBNAxcX(val: number | string) {\n    return numberToBN(val, 9);\n}\n\nexport function numberToBNAxcP(val: number | string) {\n    return numberToBNAxcX(val);\n}\n\nexport function numberToBNAxcC(val: number | string) {\n    return numberToBN(val, 18);\n}\n\n/**\n * @Remarks\n * A helper method to convert BN numbers to human readable strings.\n *\n * @param val The amount to convert\n * @param decimals Number of decimal places to parse the amount with\n *\n * @example\n * ```\n * bnToLocaleString(new BN(100095),2)\n * // will return '1,000.95'\n * ```\n */\nexport function bnToLocaleString(val: BN, decimals = 9): string {\n    let bigVal = bnToBig(val, decimals);\n    return bigToLocaleString(bigVal, decimals);\n}\n\nexport function bigToLocaleString(bigVal: Big, decimals: number = 9): string {\n    let fixedStr = bigVal.toFixed(decimals);\n    let split = fixedStr.split('.');\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\n\n    if (split.length === 1) {\n        return wholeStr;\n    } else {\n        let remainderStr = split[1];\n\n        // remove trailing 0s\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\n        while (lastChar === '0') {\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\n        }\n\n        let trimmed = remainderStr.substring(0, decimals);\n        if (!trimmed) return wholeStr;\n        return `${wholeStr}.${trimmed}`;\n    }\n}\n\n/**\n * Converts a string to a BN value of the given denomination.\n * @param value The string value of the\n * @param decimals\n *\n * @example\n * ```\n * stringToBN('1.32', 5) // is same as BN(132000)\n * ```\n */\nexport function stringToBN(value: string, decimals: number) {\n    let big = Big(value);\n    let tens = Big(10).pow(decimals);\n    let mult = big.times(tens);\n    let rawStr = mult.toFixed(0, 0);\n    return new BN(rawStr);\n}\n\nexport function bigToBN(val: Big, denom: number): BN {\n    let denomFlr = Math.floor(denom);\n    if (denomFlr < 0) throw new Error('Denomination can not be less that 0.');\n\n    const bnBig = val.mul(Big(10).pow(denomFlr));\n    const bnStr = bnBig.toFixed(0, 0);\n    return new BN(bnStr);\n}\n","import { pChain, xChain } from '@/Network/network';\nimport { BN } from '@zee-ava/avajs';\n\n/**\n * Returns the transaction fee for X chain.\n */\nexport function getTxFeeX(): BN {\n    return xChain.getTxFee();\n}\n\n/**\n * Returns the transaction fee for P chain.\n */\nexport function getTxFeeP(): BN {\n    return pChain.getTxFee();\n}\n","import axios from 'axios';\n\nconst COINGECKO_URL = 'https://api.coingecko.com/api/v3/simple/price?ids=axia-2&vs_currencies=usd';\n\n/**\n * Fetches the current AXC price using Coin Gecko.\n * @remarks\n * You might get rate limited if you use this function frequently.\n *\n * @return\n * Current USD price of 1 AXC\n */\nexport async function getAxcPrice(): Promise<number> {\n    const res = await axios.get(COINGECKO_URL);\n    return res.data['axia-2'].usd;\n}\n","import {\n    AvmStatusResponseType,\n    AvmStatusType,\n    ChainStatusResponseTypeC,\n    ChainStatusTypeC,\n    PlatformStatusResponseType,\n    PlatformStatusType,\n} from '@/utils/types';\nimport { cChain, pChain, web3, xChain } from '@/Network/network';\n\n/**\n * Waits until the given tx id is accepted on X chain\n * @param txId Tx ID to wait for\n * @param tryCount Number of attempts until timeout\n */\nexport async function waitTxX(txId: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n    let resp: AvmStatusResponseType;\n\n    try {\n        resp = (await xChain.getTxStatus(txId)) as AvmStatusResponseType;\n    } catch (e) {\n        throw new Error('Unable to get transaction status.');\n    }\n\n    let status: AvmStatusType;\n    let reason;\n    if (typeof resp === 'string') {\n        status = resp as AvmStatusType;\n    } else {\n        status = resp.status as AvmStatusType;\n        reason = resp.reason;\n    }\n\n    if (status === 'Unknown' || status === 'Processing') {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxX(txId, tryCount - 1));\n            }, 1000);\n        });\n        // return await waitTxX(txId, tryCount - 1);\n    } else if (status === 'Rejected') {\n        throw new Error(reason);\n    } else if (status === 'Accepted') {\n        return txId;\n    }\n\n    return txId;\n}\n\nexport async function waitTxP(txId: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n    let resp: PlatformStatusResponseType;\n\n    try {\n        resp = (await pChain.getTxStatus(txId)) as PlatformStatusResponseType;\n    } catch (e) {\n        throw new Error('Unable to get transaction status.');\n    }\n\n    let status: PlatformStatusType;\n    let reason;\n    if (typeof resp === 'string') {\n        status = resp as PlatformStatusType;\n    } else {\n        status = resp.status as PlatformStatusType;\n        reason = resp.reason;\n    }\n\n    if (status === 'Unknown' || status === 'Processing') {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxP(txId, tryCount - 1));\n            }, 1000);\n        });\n        // return await waitTxX(txId, tryCount - 1);\n    } else if (status === 'Dropped') {\n        throw new Error(reason);\n    } else if (status === 'Committed') {\n        return txId;\n    } else {\n        throw new Error('Unknown status type.');\n    }\n}\n\nexport async function waitTxEvm(txHash: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n\n    let receipt;\n\n    try {\n        receipt = await web3.eth.getTransactionReceipt(txHash);\n    } catch (e) {\n        throw new Error('Unable to get transaction receipt.');\n    }\n\n    if (!receipt) {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxEvm(txHash, tryCount - 1));\n            }, 1000);\n        });\n    } else {\n        if (receipt.status) {\n            return txHash;\n        } else {\n            throw new Error('Transaction reverted.');\n        }\n    }\n}\n\nexport async function waitTxC(txId: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n\n    let resp: ChainStatusResponseTypeC;\n    try {\n        resp = (await cChain.getAtomicTxStatus(txId)) as ChainStatusResponseTypeC;\n    } catch (e) {\n        throw new Error('Unable to get transaction status.');\n    }\n\n    let status: ChainStatusTypeC;\n    let reason;\n    if (typeof resp === 'string') {\n        status = resp as ChainStatusTypeC;\n    } else {\n        status = resp.status as ChainStatusTypeC;\n        reason = resp.reason;\n    }\n\n    if (status === 'Unknown' || status === 'Processing') {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxC(txId, tryCount - 1));\n            }, 1000);\n        });\n        // return await waitTxX(txId, tryCount - 1);\n    } else if (status === 'Dropped') {\n        throw new Error(reason);\n    } else if (status === 'Accepted') {\n        return txId;\n    } else {\n        throw new Error('Unknown status type.');\n    }\n}\n","export async function sleep(durMs: number) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, durMs);\n    });\n}\n","// If any of the outputs has a different chain ID, that's the destination chain\n// else return current chain\nimport { iHistoryNftFamilyBalance, ITransactionData, UTXO } from '@/History';\nimport { BN } from '@zee-ava/avajs';\nimport { AVMConstants } from '@zee-ava/avajs/dist/apis/avm';\nimport { parseNftPayload } from '@/utils';\n\n/**\n * Returns the destination chain id.\n * @param tx Tx data from the explorer.\n */\nexport function findDestinationChain(tx: ITransactionData): string {\n    let baseChain = tx.chainID;\n    let outs = tx.outputs || [];\n\n    for (let i = 0; i < outs.length; i++) {\n        let outChainId = outs[i].outChainID;\n        if (!outChainId) continue;\n        if (outChainId !== baseChain) return outChainId;\n    }\n    return baseChain;\n}\n\n// If any of the inputs has a different chain ID, thats the source chain\n// else return current chain\n/**\n * Returns the source chain id.\n * @param tx Tx data from the explorer.\n */\nexport function findSourceChain(tx: ITransactionData): string {\n    let baseChain = tx.chainID;\n    let ins = tx.inputs || [];\n\n    for (let i = 0; i < ins.length; i++) {\n        let inChainId = ins[i].output.inChainID;\n        if (!inChainId) continue;\n        if (inChainId !== baseChain) return inChainId;\n    }\n    return baseChain;\n}\n\n/**\n * Returns true if this utxo is owned by any of the given addresses\n * @param ownerAddrs Addresses to check against\n * @param output The UTXO\n */\nexport function isOutputOwner(ownerAddrs: string[], output: UTXO): boolean {\n    let outAddrs = output.addresses;\n    if (!outAddrs) return false;\n\n    let totAddrs = outAddrs.filter((addr) => {\n        return ownerAddrs.includes(addr);\n    });\n\n    return totAddrs.length > 0;\n}\n\nexport function isOutputOwnerC(ownerAddr: string, output: UTXO): boolean {\n    let outAddrs = output.caddresses;\n    if (!outAddrs) return false;\n    return outAddrs.includes(ownerAddr);\n}\n\n/**\n * Given an array of transactions from the explorer, filter out duplicate transactions\n * @param txs\n */\nexport function filterDuplicateTransactions(txs: ITransactionData[]) {\n    let txsIds: string[] = [];\n    let filtered: ITransactionData[] = [];\n\n    for (let i = 0; i < txs.length; i++) {\n        let tx = txs[i];\n        let txId = tx.id;\n\n        if (txsIds.includes(txId)) {\n            continue;\n        } else {\n            txsIds.push(txId);\n            filtered.push(tx);\n        }\n    }\n    return filtered;\n}\n\n/**\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for X/P addresses.\n * @param utxos UTXOs to calculate balance from.\n * @param addresses The wallet's  addresses.\n * @param assetID Only count outputs of this asset ID.\n * @param chainID Only count the outputs on this chain.\n * @param isStake Set to `true` if looking for staking utxos.\n */\nexport function getAssetBalanceFromUTXOs(\n    utxos: UTXO[],\n    addresses: string[],\n    assetID: string,\n    chainID: string,\n    isStake = false\n) {\n    let myOuts = utxos.filter((utxo) => {\n        if (\n            assetID === utxo.assetID &&\n            isOutputOwner(addresses, utxo) &&\n            chainID === utxo.chainID &&\n            utxo.stake === isStake\n        ) {\n            return true;\n        }\n        return false;\n    });\n\n    let tot = myOuts.reduce((acc, utxo) => {\n        return acc.add(new BN(utxo.amount));\n    }, new BN(0));\n\n    return tot;\n}\n\nexport function getNFTBalanceFromUTXOs(utxos: UTXO[], addresses: string[], assetID: string): iHistoryNftFamilyBalance {\n    let nftUTXOs = utxos.filter((utxo) => {\n        if (\n            utxo.outputType === AVMConstants.NFTXFEROUTPUTID &&\n            utxo.assetID === assetID &&\n            isOutputOwner(addresses, utxo)\n        ) {\n            return true;\n        }\n        return false;\n    });\n\n    let res: iHistoryNftFamilyBalance = {};\n    for (let i = 0; i < nftUTXOs.length; i++) {\n        let utxo = nftUTXOs[i];\n        let groupID = utxo.groupID;\n\n        let content;\n        if (utxo.payload) {\n            let parsedPayload = parseNftPayload(utxo.payload);\n            content = parsedPayload.getContent().toString();\n        }\n\n        if (res[groupID]) {\n            res[groupID].amount++;\n        } else {\n            res[groupID] = {\n                payload: content || '',\n                amount: 1,\n            };\n        }\n    }\n    return res;\n}\n\n/**\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for EVM address.\n * @param utxos UTXOs to calculate balance from.\n * @param address The wallet's  evm address `0x...`.\n * @param assetID Only count outputs of this asset ID.\n * @param chainID Only count the outputs on this chain.\n * @param isStake Set to `true` if looking for staking utxos.\n */\nexport function getEvmAssetBalanceFromUTXOs(\n    utxos: UTXO[],\n    address: string,\n    assetID: string,\n    chainID: string,\n    isStake = false\n) {\n    let myOuts = utxos.filter((utxo) => {\n        if (\n            assetID === utxo.assetID &&\n            isOutputOwnerC(address, utxo) &&\n            chainID === utxo.chainID &&\n            utxo.stake === isStake\n        ) {\n            return true;\n        }\n        return false;\n    });\n\n    let tot = myOuts.reduce((acc, utxo) => {\n        return acc.add(new BN(utxo.amount));\n    }, new BN(0));\n\n    return tot;\n}\n\n/**\n * Parse the raw memo field to readable text.\n * @param raw\n */\nexport function parseMemo(raw: string): string {\n    const memoText = new Buffer(raw, 'base64').toString('utf8');\n\n    // Bug that sets memo to empty string (AAAAAA==) for some tx types\n    if (!memoText.length || raw === 'AAAAAA==') return '';\n    return memoText;\n}\n","import { ITransactionData, UTXO } from '@/History/raw_types';\nimport { BN } from '@zee-ava/avajs';\nimport { iHistoryBaseTxTokenOwners } from '@/History/parsed_types';\n\nexport function filterDuplicateStrings(vals: string[]) {\n    return vals.filter((val, i) => vals.indexOf(val) === i);\n}\n\nexport function isArraysOverlap(arr1: any[], arr2: any[]): boolean {\n    let overlaps = arr1.filter((item) => arr2.includes(item));\n    return overlaps.length > 0;\n}\n\n// To get the stake amount, sum the non-reward output utxos.\nexport function getStakeAmount(tx: ITransactionData): BN {\n    let outs = tx.outputs || [];\n    let nonRewardUtxos = outs.filter((utxo) => !utxo.rewardUtxo && utxo.stake);\n\n    let tot = getOutputTotals(nonRewardUtxos);\n    return tot;\n}\n\n/**\n * Returns UTXOs owned by the given addresses\n * @param outs UTXOs to filter\n * @param myAddrs Addresses to filter by\n */\nexport function getOwnedOutputs(outs: UTXO[], myAddrs: string[]) {\n    return outs.filter((out) => {\n        let outAddrs = out.addresses || [];\n        return isArraysOverlap(myAddrs, outAddrs);\n    });\n}\n\n/**\n * Returns addresses of the given UTXOs\n * @param outs UTXOs to get the addresses of.\n */\nexport function getAddresses(outs: UTXO[]): string[] {\n    let allAddrs: string[] = [];\n\n    for (let i = 0; i < outs.length; i++) {\n        let out = outs[i];\n        let addrs = out.addresses || [];\n        allAddrs.push(...addrs);\n    }\n\n    // Remove duplicated\n    return allAddrs.filter((addr, i) => allAddrs.indexOf(addr) === i);\n}\n\n/**\n * Returns only the UTXOs of the given asset id.\n * @param outs\n * @param assetID\n */\nexport function getAssetOutputs(outs: UTXO[], assetID: string) {\n    return outs.filter((out) => out.assetID === assetID);\n}\n\n/**\n * Returns UTXOs not owned by the given addresses\n * @param outs UTXOs to filter\n * @param myAddrs Addresses to filter by\n */\nexport function getNotOwnedOutputs(outs: UTXO[], myAddrs: string[]) {\n    return outs.filter((out) => {\n        let outAddrs = out.addresses || [];\n        return !isArraysOverlap(myAddrs, outAddrs);\n    });\n}\n\nexport function getOutputTotals(outs: UTXO[]) {\n    return outs.reduce((acc, out) => {\n        return acc.add(new BN(out.amount));\n    }, new BN(0));\n}\n\nexport function getRewardOuts(outs: UTXO[]) {\n    return outs.filter((out) => out.rewardUtxo);\n}\n\n/**\n * Returns outputs belonging to the given chain ID\n * @param outs UTXOs to filter\n * @param chainID Chain ID to filter by\n */\nexport function getOutputsOfChain(outs: UTXO[], chainID: string) {\n    return outs.filter((out) => out.chainID === chainID);\n}\n\n/**\n * Filters the UTXOs of a certain output type\n * @param outs UTXOs to filter\n * @param type Output type to filter by\n */\nexport function getOutputsOfType(outs: UTXO[], type: number) {\n    return outs.filter((out) => out.outputType === type);\n}\n\n/**\n * Returns an array of Asset IDs from the given UTXOs\n * @param outs Array of UTXOs\n */\nexport function getOutputsAssetIDs(outs: UTXO[]): string[] {\n    let res = [];\n\n    for (let i = 0; i < outs.length; i++) {\n        let out = outs[i];\n        res.push(out.assetID);\n    }\n    return filterDuplicateStrings(res);\n}\n\n/**\n * Returns a map of asset id to owner addresses\n * @param outs\n */\nexport function getOutputsAssetOwners(outs: UTXO[]): iHistoryBaseTxTokenOwners {\n    let assetIDs = getOutputsAssetIDs(outs);\n    let res: iHistoryBaseTxTokenOwners = {};\n\n    for (let i = 0; i < assetIDs.length; i++) {\n        let id = assetIDs[i];\n        let assetUTXOs = getAssetOutputs(outs, id);\n        let addrs = getAddresses(assetUTXOs);\n        res[id] = addrs;\n    }\n\n    return res;\n}\n","import {\n    iHistoryBaseTx,\n    iHistoryBaseTxNFTsReceived,\n    iHistoryBaseTxNFTsReceivedRaw,\n    iHistoryBaseTxNFTsSent,\n    iHistoryBaseTxNFTsSentRaw,\n    iHistoryBaseTxToken,\n    iHistoryBaseTxTokenLossGain,\n    iHistoryBaseTxTokenOwners,\n    ITransactionData,\n    UTXO,\n} from '@/History';\nimport * as Assets from '@/Asset/Assets';\nimport { bnToLocaleString, getTxFeeX } from '@/utils';\nimport { AVMConstants } from '@zee-ava/avajs/dist/apis/avm';\nimport { BN } from '@zee-ava/avajs';\nimport { getAssetBalanceFromUTXOs, getNFTBalanceFromUTXOs, parseMemo } from '@/History/history_helpers';\nimport {\n    filterDuplicateStrings,\n    getAssetOutputs,\n    getNotOwnedOutputs,\n    getOutputsAssetIDs,\n    getOutputsAssetOwners,\n    getOutputsOfType,\n    getOutputTotals,\n    getOwnedOutputs,\n} from '@/History/utxo_helpers';\nimport { getAxcAssetID } from '@/Network';\n\nexport async function getBaseTxSummary(tx: ITransactionData, ownerAddrs: string[]): Promise<iHistoryBaseTx> {\n    let ins = tx.inputs?.map((input) => input.output) || [];\n    let outs = tx.outputs || [];\n\n    // Calculate losses from inputs\n    let losses = getOwnedTokens(ins, ownerAddrs);\n    let gains = getOwnedTokens(outs, ownerAddrs);\n\n    let nowOwnedIns = getNotOwnedOutputs(ins, ownerAddrs);\n    let nowOwnedOuts = getNotOwnedOutputs(outs, ownerAddrs);\n\n    let froms = getOutputsAssetOwners(nowOwnedIns);\n    let tos = getOutputsAssetOwners(nowOwnedOuts);\n\n    let tokens = await getBaseTxTokensSummary(gains, losses, froms, tos);\n\n    return {\n        id: tx.id,\n        fee: getTxFeeX(),\n        type: 'transaction',\n        timestamp: new Date(tx.timestamp),\n        memo: parseMemo(tx.memo),\n        tokens: tokens,\n    };\n}\n\nfunction getBaseTxNFTLosses(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxNFTsSentRaw {\n    let ins = tx.inputs || [];\n    let inUTXOs = ins.map((input) => input.output);\n    let nftUTXOs = inUTXOs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\n    });\n\n    let res: iHistoryBaseTxNFTsSentRaw = {};\n    for (let assetID in tx.inputTotals) {\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\n\n        // If empty dictionary pass\n        if (Object.keys(nftBal).length === 0) continue;\n\n        res[assetID] = nftBal;\n    }\n    return res;\n}\n\nfunction getBaseTxNFTGains(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxNFTsReceivedRaw {\n    let outs = tx.outputs || [];\n    let nftUTXOs = outs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\n    });\n    let res: iHistoryBaseTxNFTsReceivedRaw = {};\n\n    for (let assetID in tx.inputTotals) {\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\n        // If empty dictionary pass\n        if (Object.keys(nftBal).length === 0) continue;\n\n        res[assetID] = nftBal;\n    }\n    return res;\n}\n\n/**\n * Returns a dictionary of asset totals belonging to the owner\n * @param utxos\n * @param ownerAddrs\n */\nfunction getOwnedTokens(utxos: UTXO[], ownerAddrs: string[]): iHistoryBaseTxTokenLossGain {\n    let tokenUTXOs = getOutputsOfType(utxos, AVMConstants.SECPXFEROUTPUTID);\n    // Owned inputs\n    let myUTXOs = getOwnedOutputs(tokenUTXOs, ownerAddrs);\n\n    // Asset IDs received\n    let assetIDs = getOutputsAssetIDs(myUTXOs);\n\n    let res: iHistoryBaseTxTokenLossGain = {};\n\n    for (let i = 0; i < assetIDs.length; i++) {\n        let assetID = assetIDs[i];\n        let assetUTXOs = getAssetOutputs(myUTXOs, assetID);\n        let tot = getOutputTotals(assetUTXOs);\n        res[assetID] = tot;\n    }\n\n    return res;\n}\n\nasync function getBaseTxTokensSummary(\n    gains: iHistoryBaseTxTokenLossGain,\n    losses: iHistoryBaseTxTokenLossGain,\n    froms: iHistoryBaseTxTokenOwners,\n    tos: iHistoryBaseTxTokenOwners\n): Promise<iHistoryBaseTxToken[]> {\n    let res: iHistoryBaseTxToken[] = [];\n\n    let assetIDs = filterDuplicateStrings([...Object.keys(gains), ...Object.keys(losses)]);\n\n    // Fetch asset descriptions\n    let calls = assetIDs.map((id) => Assets.getAssetDescription(id));\n    let descs = await Promise.all(calls);\n    let descsDict: any = {};\n\n    // Convert array to dict\n    for (let i = 0; i < descs.length; i++) {\n        let desc = descs[i];\n        descsDict[desc.assetID] = desc;\n    }\n\n    for (let i = 0; i < assetIDs.length; i++) {\n        let id = assetIDs[i];\n        let tokenGain = gains[id] || new BN(0);\n        let tokenLost = losses[id] || new BN(0);\n        let tokenDesc = descsDict[id];\n\n        // If we sent axc, deduct the fee\n        if (id === getAxcAssetID() && !tokenLost.isZero()) {\n            tokenLost = tokenLost.sub(getTxFeeX());\n        }\n\n        // How much we gained/lost of this token\n        let diff = tokenGain.sub(tokenLost);\n        let diffClean = bnToLocaleString(diff, tokenDesc.denomination);\n\n        // If we didnt gain or lose anything, ignore this token\n        if (diff.isZero()) continue;\n\n        if (diff.isNeg()) {\n            res.push({\n                amount: diff,\n                amountDisplayValue: diffClean,\n                addresses: tos[id],\n                asset: tokenDesc,\n            });\n        } else {\n            res.push({\n                amount: diff,\n                amountDisplayValue: diffClean,\n                addresses: froms[id],\n                asset: tokenDesc,\n            });\n        }\n    }\n\n    return res;\n}\n","import { ITransactionData } from '@/History/raw_types';\nimport { iHistoryImportExport } from '@/History/parsed_types';\nimport { findDestinationChain, findSourceChain, getAssetBalanceFromUTXOs, parseMemo } from '@/History/history_helpers';\nimport { idToChainAlias } from '@/Network/helpers/aliasFromNetworkID';\nimport { activeNetwork, xChain } from '@/Network/network';\nimport { bnToAxcX } from '@/utils';\nimport { getOutputsOfChain, getOutputTotals, getOwnedOutputs } from '@/History/utxo_helpers';\n\nexport function getImportSummary(tx: ITransactionData, addresses: string[]): iHistoryImportExport {\n    let sourceChain = findSourceChain(tx);\n    let chainAliasFrom = idToChainAlias(sourceChain);\n    let chainAliasTo = idToChainAlias(tx.chainID);\n\n    let outs = tx.outputs || [];\n    let myOuts = getOwnedOutputs(outs, addresses);\n    let amtOut = getOutputTotals(myOuts);\n\n    let time = new Date(tx.timestamp);\n    let fee = xChain.getTxFee();\n\n    let res: iHistoryImportExport = {\n        id: tx.id,\n        memo: parseMemo(tx.memo),\n        source: chainAliasFrom,\n        destination: chainAliasTo,\n        amount: amtOut,\n        amountDisplayValue: bnToAxcX(amtOut),\n        timestamp: time,\n        type: 'import',\n        fee: fee,\n    };\n\n    return res;\n}\n\nexport function getExportSummary(tx: ITransactionData, addresses: string[]): iHistoryImportExport {\n    let sourceChain = findSourceChain(tx);\n    let chainAliasFrom = idToChainAlias(sourceChain);\n\n    let destinationChain = findDestinationChain(tx);\n    let chainAliasTo = idToChainAlias(destinationChain);\n\n    let outs = tx.outputs || [];\n    let myOuts = getOwnedOutputs(outs, addresses);\n    let chainOuts = getOutputsOfChain(myOuts, destinationChain);\n    let amtOut = getOutputTotals(chainOuts);\n\n    let time = new Date(tx.timestamp);\n    let fee = xChain.getTxFee();\n\n    let res: iHistoryImportExport = {\n        id: tx.id,\n        memo: parseMemo(tx.memo),\n        source: chainAliasFrom,\n        destination: chainAliasTo,\n        amount: amtOut,\n        amountDisplayValue: bnToAxcX(amtOut),\n        timestamp: time,\n        type: 'export',\n        fee: fee,\n    };\n\n    return res;\n}\n","import {\n    HistoryItemType,\n    HistoryItemTypeName,\n    iHistoryEVMTx,\n    iHistoryImportExport,\n    iHistoryItem,\n    iHistoryStaking,\n    ITransactionData,\n    ITransactionDataEVM,\n} from '@/History';\nimport { findSourceChain, getEvmAssetBalanceFromUTXOs, parseMemo } from '@/History/history_helpers';\nimport { activeNetwork, xChain } from '@/Network/network';\nimport { bnToAxcC, bnToAxcP, bnToAxcX } from '@/utils';\nimport { BN } from '@zee-ava/avajs';\nimport { getBaseTxSummary } from '@/History/base_tx_parser';\nimport { idToChainAlias } from '@/Network/helpers/aliasFromNetworkID';\nimport { getExportSummary, getImportSummary } from '@/History/importExportParser';\nimport { getOutputTotals, getOwnedOutputs, getRewardOuts, getStakeAmount } from '@/History/utxo_helpers';\n\nexport async function getTransactionSummary(\n    tx: ITransactionData,\n    walletAddrs: string[],\n    evmAddress: string\n): Promise<HistoryItemType> {\n    let cleanAddressesXP = walletAddrs.map((addr) => addr.split('-')[1]);\n\n    switch (tx.type) {\n        case 'import':\n        case 'pvm_import':\n            return getImportSummary(tx, cleanAddressesXP);\n        case 'export':\n        case 'pvm_export':\n        case 'atomic_export_tx':\n            return getExportSummary(tx, cleanAddressesXP);\n        case 'add_validator':\n        case 'add_delegator':\n            return getStakingSummary(tx, cleanAddressesXP);\n        case 'atomic_import_tx':\n            return getImportSummaryC(tx, evmAddress);\n        case 'operation':\n        case 'base':\n            return await getBaseTxSummary(tx, cleanAddressesXP);\n        default:\n            return getUnsupportedSummary(tx);\n    }\n}\n\nfunction getUnsupportedSummary(tx: ITransactionData): iHistoryItem {\n    return {\n        id: tx.id,\n        type: 'not_supported',\n        timestamp: new Date(tx.timestamp),\n        fee: new BN(0),\n    };\n}\n\nfunction getStakingSummary(tx: ITransactionData, ownerAddrs: string[]): iHistoryStaking {\n    let time = new Date(tx.timestamp);\n\n    // let pChainID = activeNetwork.pChainID;\n    // let axcID = activeNetwork.axcID;\n    let ins = tx.inputs?.map((tx) => tx.output) || [];\n    let myIns = getOwnedOutputs(ins, ownerAddrs);\n\n    let outs = tx.outputs || [];\n    let myOuts = getOwnedOutputs(outs, ownerAddrs);\n\n    let stakeAmount = getStakeAmount(tx);\n\n    // Assign the type\n    let type: HistoryItemTypeName = tx.type === 'add_validator' ? 'add_validator' : 'add_delegator';\n    // If this wallet only received the fee\n    if (myIns.length === 0 && type === 'add_delegator') {\n        type = 'delegation_fee';\n    } else if (myIns.length === 0 && type === 'add_validator') {\n        type = 'validation_fee';\n    }\n\n    let rewardAmount;\n    let rewardAmountClean;\n    if (tx.rewarded) {\n        let rewardOuts = getRewardOuts(myOuts);\n        rewardAmount = getOutputTotals(rewardOuts);\n        rewardAmountClean = bnToAxcP(rewardAmount);\n    }\n\n    return {\n        id: tx.id,\n        nodeID: tx.validatorNodeID,\n        stakeStart: new Date(tx.validatorStart * 1000),\n        stakeEnd: new Date(tx.validatorEnd * 1000),\n        timestamp: time,\n        type: type,\n        fee: new BN(0),\n        amount: stakeAmount,\n        amountDisplayValue: bnToAxcP(stakeAmount),\n        memo: parseMemo(tx.memo),\n        isRewarded: tx.rewarded,\n        rewardAmount: rewardAmount,\n        rewardAmountDisplayValue: rewardAmountClean,\n    };\n}\n\n// Returns the summary for a C chain import TX\nfunction getImportSummaryC(tx: ITransactionData, ownerAddr: string) {\n    let sourceChain = findSourceChain(tx);\n    let chainAliasFrom = idToChainAlias(sourceChain);\n    let chainAliasTo = idToChainAlias(tx.chainID);\n\n    let axcID = activeNetwork.axcID;\n\n    let outs = tx.outputs || [];\n    let amtOut = getEvmAssetBalanceFromUTXOs(outs, ownerAddr, axcID, tx.chainID);\n\n    let time = new Date(tx.timestamp);\n    let fee = xChain.getTxFee();\n\n    let res: iHistoryImportExport = {\n        id: tx.id,\n        source: chainAliasFrom,\n        destination: chainAliasTo,\n        amount: amtOut,\n        amountDisplayValue: bnToAxcX(amtOut),\n        timestamp: time,\n        type: 'import',\n        fee: fee,\n        memo: parseMemo(tx.memo),\n    };\n\n    return res;\n}\n","import { ITransactionDataEVM } from '@/History/raw_types';\nimport { iHistoryEVMTx } from '@/History/parsed_types';\nimport { bnToAxcC } from '@/utils';\nimport { BN } from '@zee-ava/avajs';\n\nexport function getTransactionSummaryEVM(tx: ITransactionDataEVM, walletAddress: string): iHistoryEVMTx {\n    let isSender = tx.fromAddr.toUpperCase() === walletAddress.toUpperCase();\n\n    let amt = new BN(tx.value);\n    let amtClean = bnToAxcC(amt);\n    let date = new Date(tx.createdAt);\n\n    let gasLimit = new BN(tx.gasLimit);\n    let gasPrice = new BN(tx.gasPrice);\n    let feeBN = gasLimit.mul(gasPrice); // in gwei\n\n    return {\n        id: tx.hash,\n        fee: feeBN,\n        memo: '',\n        block: tx.block,\n        isSender,\n        type: 'transaction_evm',\n        amount: amt,\n        amountDisplayValue: amtClean,\n        gasLimit: tx.gasLimit,\n        gasPrice: tx.gasPrice,\n        from: tx.fromAddr,\n        to: tx.toAddr,\n        timestamp: date,\n        input: tx.input,\n    };\n}\n","import { BN } from '@zee-ava/avajs';\nimport { ChainIdType } from '@/types';\nimport { iAssetDescriptionClean } from '@/Asset/types';\n\nexport type HistoryItemType = AVMHistoryItemType | PVMHistoryItemType | EVMHistoryITemType | iHistoryItem;\n\nexport type AVMHistoryItemType = iHistoryBaseTx | iHistoryImportExport;\nexport type PVMHistoryItemType = iHistoryStaking;\nexport type EVMHistoryITemType = iHistoryEVMTx;\n\nexport type HistoryImportExportTypeName = 'import' | 'export';\nexport type HistoryItemTypeName =\n    | HistoryImportExportTypeName\n    | 'transaction'\n    | 'transaction_evm'\n    | 'add_delegator'\n    | 'add_validator'\n    | 'delegation_fee'\n    | 'validation_fee'\n    | 'not_supported';\n\nexport interface iHistoryItem {\n    id: string;\n    type: HistoryItemTypeName;\n    timestamp: Date;\n    fee: BN;\n    memo?: string;\n}\n\n/**\n * Parsed interface for Import and Export transactions.\n */\nexport interface iHistoryImportExport extends iHistoryItem {\n    amount: BN;\n    type: HistoryImportExportTypeName;\n    amountDisplayValue: string;\n    destination: ChainIdType;\n    source: ChainIdType;\n}\n\n/**\n * Typeguard for `iHistoryImportExport` interface\n * @param tx The parsed history object\n */\nexport function isHistoryImportExportTx(tx: HistoryItemType): tx is iHistoryImportExport {\n    return tx.type === 'export' || tx.type === 'import';\n}\n\n/**\n * Parsed interface for Validation, Validation Fee, Delegation and Delegation Fee transactions.\n */\nexport interface iHistoryStaking extends iHistoryItem {\n    nodeID: string;\n    stakeStart: Date;\n    stakeEnd: Date;\n    amount: BN;\n    amountDisplayValue: string;\n    isRewarded: boolean;\n    rewardAmount?: BN;\n    rewardAmountDisplayValue?: string;\n}\n\n/**\n * Typeguard for `iHistoryStaking` interface\n * @param tx The parsed history object\n */\nexport function isHistoryStakingTx(tx: HistoryItemType): tx is iHistoryStaking {\n    let types: HistoryItemTypeName[] = ['add_validator', 'add_delegator', 'validation_fee', 'delegation_fee'];\n    return types.includes(tx.type);\n}\n\n/**\n * Interface for parsed X chain base transactions.\n */\nexport interface iHistoryBaseTx extends iHistoryItem {\n    tokens: iHistoryBaseTxToken[];\n    // nfts: iHistoryBaseTxNFTs;\n}\n\n/**\n * Typeguard for `iHistoryBaseTx` interface\n * @param tx The parsed history object\n */\nexport function isHistoryBaseTx(tx: HistoryItemType): tx is iHistoryBaseTx {\n    return tx.type === 'transaction';\n}\n\n/**\n * Interface for parsed EVM transactions.\n */\nexport interface iHistoryEVMTx extends iHistoryItem {\n    block: string;\n    gasLimit: number;\n    gasPrice: string;\n    from: string;\n    to: string;\n    amount: BN;\n    amountDisplayValue: string;\n    isSender: boolean;\n    input?: string;\n}\n\nexport function isHistoryEVMTx(tx: HistoryItemType): tx is iHistoryEVMTx {\n    return tx.type === 'transaction_evm';\n}\n\nexport interface iHistoryBaseTxToken {\n    amount: BN;\n    amountDisplayValue: string;\n    addresses: string[];\n    asset: iAssetDescriptionClean;\n}\n\nexport interface iHistoryBaseTxNFTs {\n    sent: iHistoryBaseTxNFTsSent;\n    received: iHistoryBaseTxNFTsReceived;\n}\n\nexport interface iHistoryBaseTxTokenLossGain {\n    [assetId: string]: BN;\n}\n\nexport interface iHistoryBaseTxTokenOwners {\n    [assetId: string]: string[];\n}\n\nexport interface iHistoryNftFamilyBalance {\n    [groupNum: number]: {\n        payload: string;\n        amount: number;\n    };\n}\n\nexport interface iHistoryBaseTxNFTsReceivedRaw {\n    [assetID: string]: iHistoryNftFamilyBalance;\n}\nexport interface iHistoryBaseTxNFTsSentRaw {\n    [assetID: string]: iHistoryNftFamilyBalance;\n}\n\nexport interface iHistoryBaseTxNFTsSent {\n    [assetID: string]: {\n        groups: iHistoryNftFamilyBalance;\n        to: string[];\n        asset: iAssetDescriptionClean;\n    };\n}\n\nexport interface iHistoryBaseTxNFTsReceived {\n    [assetID: string]: {\n        groups: iHistoryNftFamilyBalance;\n        from: string[];\n        asset: iAssetDescriptionClean;\n    };\n}\n","import { BN, Buffer as BufferAxia } from '@zee-ava/avajs';\nimport { axia, web3 } from '@/Network/network';\nimport { publicToAddress, importPublic } from 'ethereumjs-util';\nimport { ethers } from 'ethers';\nimport { KeyPair as EVMKeyPair } from '@zee-ava/avajs/dist/apis/evm/keychain';\nimport { bintools } from '@/common';\n\nexport default class EvmWalletReadonly {\n    balance = new BN(0);\n    address: string;\n    publicKey: Buffer;\n\n    constructor(publicKey: Buffer) {\n        this.publicKey = publicKey;\n        this.address = '0x' + publicToAddress(publicKey).toString('hex');\n    }\n\n    getBalance(): BN {\n        return this.balance;\n    }\n\n    getAddress(): string {\n        return ethers.utils.getAddress(this.address);\n    }\n\n    getAddressBech32(): string {\n        let keypair = new EVMKeyPair(axia.getHRP(), 'C');\n        //@ts-ignore\n        let addr = keypair.addressFromPublicKey(BufferAxia.from(this.publicKey));\n        return bintools.addressToString(axia.getHRP(), 'C', addr);\n    }\n\n    async updateBalance() {\n        let bal = await web3.eth.getBalance(this.address);\n        this.balance = new BN(bal);\n        return this.balance;\n    }\n}\n","import { Buffer as BufferAxia } from '@zee-ava/avajs';\nimport { privateToPublic } from 'ethereumjs-util';\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\nimport { axia } from '@/Network/network';\nimport {\n    KeyChain as EVMKeyChain,\n    KeyPair as EVMKeyPair,\n    UnsignedTx as EVMUnsignedTx,\n    Tx as EVMTx,\n} from '@zee-ava/avajs/dist/apis/evm';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport { bintools } from '@/common';\n\nexport default class EvmWallet extends EvmWalletReadonly {\n    private privateKey: Buffer;\n\n    constructor(key: Buffer) {\n        let pubKey = privateToPublic(key);\n        super(pubKey);\n\n        this.privateKey = key;\n    }\n\n    private getPrivateKeyBech(): string {\n        return `PrivateKey-` + bintools.cb58Encode(BufferAxia.from(this.privateKey));\n    }\n\n    getKeyChain(): EVMKeyChain {\n        let keychain = new EVMKeyChain(axia.getHRP(), 'C');\n        keychain.importKey(this.getPrivateKeyBech());\n        return keychain;\n    }\n\n    getKeyPair(): EVMKeyPair {\n        let keychain = new EVMKeyChain(axia.getHRP(), 'C');\n        return keychain.importKey(this.getPrivateKeyBech());\n    }\n\n    signEVM(tx: Transaction | FeeMarketEIP1559Transaction) {\n        return tx.sign(this.privateKey);\n    }\n\n    signC(tx: EVMUnsignedTx): EVMTx {\n        return tx.sign(this.getKeyChain());\n    }\n\n    getPrivateKeyHex(): string {\n        return this.privateKey.toString('hex');\n    }\n}\n","import { cChain, pChain, web3, xChain } from '@/Network/network';\n\nimport { BN, Buffer } from '@zee-ava/avajs';\nimport {\n    AVMConstants,\n    MinterSet,\n    NFTMintOutput,\n    UnsignedTx as AVMUnsignedTx,\n    UTXO as AVMUTXO,\n    UTXOSet as AVMUTXOSet,\n    UTXOSet,\n} from '@zee-ava/avajs/dist/apis/avm';\n\nimport { PayloadBase } from '@zee-ava/avajs/dist/utils';\nimport { OutputOwners } from '@zee-ava/avajs/dist/common';\nimport { PlatformVMConstants, UTXOSet as PlatformUTXOSet } from '@zee-ava/avajs/dist/apis/platformvm';\n\nimport { EVMConstants } from '@zee-ava/avajs/dist/apis/evm';\n\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\nimport EthereumjsCommon from '@ethereumjs/common';\nimport Common, { Chain } from '@ethereumjs/common';\n\nimport ERC20Abi from '@openzeppelin/contracts/build/contracts/ERC20.json';\nimport ERC721Abi from '@openzeppelin/contracts/build/contracts/ERC721.json';\nimport { bintools } from '@/common';\nimport { ExportChainsC, ExportChainsP, ExportChainsX } from '@/Wallet/types';\nimport { chainIdFromAlias } from '@/Network/helpers/idFromAlias';\n\nexport async function buildCreateNftFamilyTx(\n    name: string,\n    symbol: string,\n    groupNum: number,\n    fromAddrs: string[],\n    minterAddr: string,\n    changeAddr: string,\n    utxoSet: UTXOSet\n) {\n    let fromAddresses = fromAddrs;\n    let changeAddress = changeAddr;\n    let minterAddress = minterAddr;\n\n    const minterSets: MinterSet[] = [];\n\n    // Create the groups\n    for (let i = 0; i < groupNum; i++) {\n        const minterSet: MinterSet = new MinterSet(1, [minterAddress]);\n        minterSets.push(minterSet);\n    }\n\n    let unsignedTx: AVMUnsignedTx = await xChain.buildCreateNFTAssetTx(\n        utxoSet,\n        fromAddresses,\n        [changeAddress],\n        minterSets,\n        name,\n        symbol\n    );\n    return unsignedTx;\n}\n\nexport async function buildMintNftTx(\n    mintUtxo: AVMUTXO,\n    payload: PayloadBase,\n    quantity: number,\n    ownerAddress: string,\n    changeAddress: string,\n    fromAddresses: string[],\n    utxoSet: UTXOSet\n): Promise<AVMUnsignedTx> {\n    let addrBuf = bintools.parseAddress(ownerAddress, 'X');\n    let owners = [];\n\n    let sourceAddresses = fromAddresses;\n\n    for (let i = 0; i < quantity; i++) {\n        let owner = new OutputOwners([addrBuf]);\n        owners.push(owner);\n    }\n\n    let groupID = (mintUtxo.getOutput() as NFTMintOutput).getGroupID();\n\n    let mintTx = await xChain.buildCreateNFTMintTx(\n        utxoSet,\n        owners,\n        sourceAddresses,\n        [changeAddress],\n        mintUtxo.getUTXOID(),\n        groupID,\n        payload\n    );\n    return mintTx;\n}\n\nexport async function buildAvmExportTransaction(\n    destinationChain: ExportChainsX,\n    utxoSet: AVMUTXOSet,\n    fromAddresses: string[],\n    toAddress: string,\n    amount: BN, // export amount + fee\n    sourceChangeAddress: string\n) {\n    let destinationChainId = chainIdFromAlias(destinationChain);\n\n    return await xChain.buildExportTx(utxoSet as AVMUTXOSet, amount, destinationChainId, [toAddress], fromAddresses, [\n        sourceChangeAddress,\n    ]);\n}\n\nexport async function buildPlatformExportTransaction(\n    utxoSet: PlatformUTXOSet,\n    fromAddresses: string[],\n    toAddress: string,\n    amount: BN, // export amount + fee\n    sourceChangeAddress: string,\n    destinationChain: ExportChainsP\n) {\n    let destinationChainId = chainIdFromAlias(destinationChain);\n\n    return await pChain.buildExportTx(utxoSet, amount, destinationChainId, [toAddress], fromAddresses, [\n        sourceChangeAddress,\n    ]);\n}\n\n/**\n *\n * @param fromAddresses\n * @param toAddress\n * @param amount\n * @param fromAddressBech\n * @param destinationChain Either `X` or `P`\n * @param fee Export fee in nAXC\n */\nexport async function buildEvmExportTransaction(\n    fromAddresses: string[],\n    toAddress: string,\n    amount: BN, // export amount + fee\n    fromAddressBech: string,\n    destinationChain: ExportChainsC,\n    fee: BN\n) {\n    let destinationChainId = chainIdFromAlias(destinationChain);\n\n    const nonce = await web3.eth.getTransactionCount(fromAddresses[0]);\n    const axcAssetIDBuf: Buffer = await xChain.getAXCAssetID();\n    const axcAssetIDStr: string = bintools.cb58Encode(axcAssetIDBuf);\n\n    let fromAddressHex = fromAddresses[0];\n\n    return await cChain.buildExportTx(\n        amount,\n        axcAssetIDStr,\n        destinationChainId,\n        fromAddressHex,\n        fromAddressBech,\n        [toAddress],\n        nonce,\n        undefined,\n        undefined,\n        fee\n    );\n}\n\nexport async function buildEvmTransferEIP1559Tx(\n    from: string,\n    to: string,\n    amount: BN, // in wei\n    priorityFee: BN,\n    maxFee: BN,\n    gasLimit: number\n) {\n    const nonce = await web3.eth.getTransactionCount(from);\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n\n    const common = Common.custom({ networkId, chainId });\n\n    const tx = FeeMarketEIP1559Transaction.fromTxData(\n        {\n            nonce: nonce,\n            maxFeePerGas: '0x' + maxFee.toString('hex'),\n            maxPriorityFeePerGas: '0x' + priorityFee.toString('hex'),\n            gasLimit: gasLimit,\n            to: to,\n            value: '0x' + amount.toString('hex'),\n            data: '0x',\n        },\n        //@ts-ignore\n        { common }\n    );\n    return tx;\n}\n\nexport async function buildEvmTransferNativeTx(\n    from: string,\n    to: string,\n    amount: BN, // in wei\n    gasPrice: BN,\n    gasLimit: number\n) {\n    const nonce = await web3.eth.getTransactionCount(from);\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n\n    const common = Common.custom({ networkId, chainId });\n\n    const tx = Transaction.fromTxData(\n        {\n            nonce: nonce,\n            gasPrice: '0x' + gasPrice.toString('hex'),\n            gasLimit: gasLimit,\n            to: to,\n            value: '0x' + amount.toString('hex'),\n            data: '0x',\n        },\n        //@ts-ignore\n        { common }\n    );\n    return tx;\n}\n\nexport async function buildCustomEvmTx(\n    from: string,\n    gasPrice: BN,\n    gasLimit: number,\n    data?: string,\n    to?: string,\n    value?: string,\n    nonce?: number\n): Promise<Transaction> {\n    if (typeof nonce === 'undefined') {\n        nonce = await web3.eth.getTransactionCount(from);\n    }\n\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n\n    const chainParams = {\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\n    };\n\n    let gasPriceHex = `0x${gasPrice.toString('hex')}`;\n\n    let tx = Transaction.fromTxData(\n        {\n            nonce,\n            gasPrice: gasPriceHex,\n            gasLimit,\n            value,\n            to,\n            data,\n        },\n        //@ts-ignore\n        chainParams\n    );\n    return tx;\n}\n\nexport async function buildEvmTransferErc20Tx(\n    from: string,\n    to: string,\n    amount: BN, // in wei\n    gasPrice: BN,\n    gasLimit: number,\n    contractAddress: string\n) {\n    //@ts-ignore\n    const cont = new web3.eth.Contract(ERC20Abi.abi, contractAddress);\n    const tokenTx = cont.methods.transfer(to, amount.toString());\n\n    let data = tokenTx.encodeABI();\n\n    let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, contractAddress);\n\n    return tx;\n}\n\nexport async function buildEvmTransferErc721Tx(\n    from: string,\n    to: string,\n    gasPrice: BN,\n    gasLimit: number,\n    tokenContract: string,\n    tokenId: string\n) {\n    const nonce = await web3.eth.getTransactionCount(from);\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n    const chainParams = {\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\n    };\n    // @ts-ignore\n    const contract = new web3.eth.Contract(ERC721Abi.abi, tokenContract);\n    const tokenTx = contract.methods.transferFrom(from, to, tokenId);\n\n    let tx = Transaction.fromTxData(\n        {\n            nonce: nonce,\n            gasPrice: gasPrice.toString('hex'),\n            gasLimit: gasLimit,\n            value: '0x0',\n            to: tokenContract,\n            data: tokenTx.encodeABI(),\n        },\n        //@ts-ignore\n        chainParams\n    );\n    return tx;\n}\n\nexport async function estimateErc20Gas(tokenContract: string, from: string, to: string, value: BN) {\n    //@ts-ignore\n    const contract = new web3.eth.Contract(ERC20Abi.abi, tokenContract);\n    const tokenTx = contract.methods.transfer(to, value.toString());\n    return await tokenTx.estimateGas({\n        from: from,\n    });\n}\n\n/**\n * Estimates the gas needed to send AXC\n * @param to Destination address\n * @param amount Amount of AXC to send, given in WEI\n * @param gasPrice Given in WEI\n */\nexport async function estimateAxcGas(from: string, to: string, amount: BN, gasPrice: BN): Promise<number> {\n    try {\n        return await web3.eth.estimateGas({\n            from,\n            to,\n            gasPrice: `0x${gasPrice.toString('hex')}`,\n            value: `0x${amount.toString('hex')}`,\n        });\n    } catch (e) {\n        // TODO: Throws an error if we do not have enough axc balance\n        //TODO: Is it ok to return 21000\n        return 21000;\n    }\n}\n\nexport enum AvmTxNameEnum {\n    'Transaction' = AVMConstants.BASETX,\n    'Mint' = AVMConstants.CREATEASSETTX,\n    'Operation' = AVMConstants.OPERATIONTX,\n    'Import' = AVMConstants.IMPORTTX,\n    'Export' = AVMConstants.EXPORTTX,\n}\n\nexport enum PlatfromTxNameEnum {\n    'Transaction' = PlatformVMConstants.BASETX,\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\n    'Import' = PlatformVMConstants.IMPORTTX,\n    'Export' = PlatformVMConstants.EXPORTTX,\n    'Add Subnet Validator' = PlatformVMConstants.ADDSUBNETVALIDATORTX,\n    'Create Chain' = PlatformVMConstants.CREATECHAINTX,\n    'Create Subnet' = PlatformVMConstants.CREATESUBNETTX,\n    'Advance Time' = PlatformVMConstants.ADVANCETIMETX,\n    'Reward Validator' = PlatformVMConstants.REWARDVALIDATORTX,\n}\n\n// TODO: create asset transactions\nexport enum ParseableAvmTxEnum {\n    'Transaction' = AVMConstants.BASETX,\n    'Import' = AVMConstants.IMPORTTX,\n    'Export' = AVMConstants.EXPORTTX,\n}\n\nexport enum ParseablePlatformEnum {\n    'Transaction' = PlatformVMConstants.BASETX,\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\n    'Import' = PlatformVMConstants.IMPORTTX,\n    'Export' = PlatformVMConstants.EXPORTTX,\n}\n\nexport enum ParseableEvmTxEnum {\n    'Import' = EVMConstants.IMPORTTX,\n    'Export' = EVMConstants.EXPORTTX,\n}\n","import { UTXOSet as AVMUTXOSet } from '@zee-ava/avajs/dist/apis/avm/utxos';\nimport { UTXOSet as PlatformUTXOSet } from '@zee-ava/avajs/dist/apis/platformvm/utxos';\nimport { UTXOSet as EVMUTXOSet } from '@zee-ava/avajs/dist/apis/evm/utxos';\nimport { xChain, cChain, pChain } from '@/Network/network';\nimport { ExportChainsC, ExportChainsP, ExportChainsX } from '@/Wallet/types';\nimport { chainIdFromAlias } from '@/Network/helpers/idFromAlias';\nimport { GetStakeResponse } from '@zee-ava/avajs/dist/apis/platformvm/interfaces';\n\n/**\n *\n * @param addrs an array of X chain addresses to get the atomic utxos of\n * @param sourceChain Which chain to check against, either `P` or `C`\n */\nexport async function avmGetAtomicUTXOs(addrs: string[], sourceChain: ExportChainsX): Promise<AVMUTXOSet> {\n    const selection = addrs.slice(0, 1024);\n    const remaining = addrs.slice(1024);\n\n    const sourceChainId = chainIdFromAlias(sourceChain);\n    let utxoSet = (await xChain.getUTXOs(selection, sourceChainId)).utxos;\n\n    if (remaining.length > 0) {\n        const nextSet = await avmGetAtomicUTXOs(remaining, sourceChain);\n        utxoSet = utxoSet.merge(nextSet);\n    }\n    return utxoSet;\n}\n\n// todo: Use end index to get ALL utxos\nexport async function platformGetAtomicUTXOs(addrs: string[], sourceChain: ExportChainsP): Promise<PlatformUTXOSet> {\n    let selection = addrs.slice(0, 1024);\n    let remaining = addrs.slice(1024);\n    const sourceChainId = chainIdFromAlias(sourceChain);\n\n    let utxoSet = (await pChain.getUTXOs(selection, sourceChainId)).utxos;\n    if (remaining.length > 0) {\n        let nextSet = await platformGetAtomicUTXOs(remaining, sourceChain);\n        utxoSet = utxoSet.merge(nextSet);\n    }\n    return utxoSet;\n}\n\n// todo: Use end index to get ALL utxos\nexport async function evmGetAtomicUTXOs(addrs: string[], sourceChain: ExportChainsC): Promise<EVMUTXOSet> {\n    if (addrs.length > 1024) {\n        throw new Error('Number of addresses can not be greater than 1024.');\n    }\n    const sourceChainId = chainIdFromAlias(sourceChain);\n    let result: EVMUTXOSet = (await cChain.getUTXOs(addrs, sourceChainId)).utxos;\n    return result;\n}\n\nexport async function getStakeForAddresses(addrs: string[]): Promise<GetStakeResponse> {\n    if (addrs.length <= 256) {\n        let data = await pChain.getStake(addrs);\n        return data;\n    } else {\n        //Break the list in to 1024 chunks\n        let chunk = addrs.slice(0, 256);\n        let remainingChunk = addrs.slice(256);\n\n        let chunkData = await pChain.getStake(chunk);\n        let chunkStake = chunkData.staked;\n        let chunkUtxos = chunkData.stakedOutputs;\n\n        let next = await getStakeForAddresses(remainingChunk);\n        return {\n            staked: chunkStake.add(next.staked),\n            stakedOutputs: [...chunkUtxos, ...next.stakedOutputs],\n        };\n    }\n}\n\nexport async function avmGetAllUTXOs(addrs: string[]): Promise<AVMUTXOSet> {\n    if (addrs.length <= 1024) {\n        let utxos = await avmGetAllUTXOsForAddresses(addrs);\n        return utxos;\n    } else {\n        //Break the list in to 1024 chunks\n        let chunk = addrs.slice(0, 1024);\n        let remainingChunk = addrs.slice(1024);\n\n        let newSet = await avmGetAllUTXOsForAddresses(chunk);\n        return newSet.merge(await avmGetAllUTXOs(remainingChunk));\n    }\n}\n\nexport async function avmGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<AVMUTXOSet> {\n    if (addrs.length > 1024) throw new Error('Maximum length of addresses is 1024');\n    let response;\n    if (!endIndex) {\n        response = await xChain.getUTXOs(addrs);\n    } else {\n        response = await xChain.getUTXOs(addrs, undefined, 0, endIndex);\n    }\n\n    let utxoSet = response.utxos;\n    let nextEndIndex = response.endIndex;\n    let len = response.numFetched;\n\n    if (len >= 1024) {\n        let subUtxos = await avmGetAllUTXOsForAddresses(addrs, nextEndIndex);\n        return utxoSet.merge(subUtxos);\n    }\n    return utxoSet;\n}\n\n// helper method to get utxos for more than 1024 addresses\nexport async function platformGetAllUTXOs(addrs: string[]): Promise<PlatformUTXOSet> {\n    if (addrs.length <= 1024) {\n        let newSet = await platformGetAllUTXOsForAddresses(addrs);\n        return newSet;\n    } else {\n        //Break the list in to 1024 chunks\n        let chunk = addrs.slice(0, 1024);\n        let remainingChunk = addrs.slice(1024);\n\n        let newSet = await platformGetAllUTXOsForAddresses(chunk);\n\n        return newSet.merge(await platformGetAllUTXOs(remainingChunk));\n    }\n}\n\nexport async function platformGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<PlatformUTXOSet> {\n    let response;\n    if (!endIndex) {\n        response = await pChain.getUTXOs(addrs);\n    } else {\n        response = await pChain.getUTXOs(addrs, undefined, 0, endIndex);\n    }\n\n    let utxoSet = response.utxos;\n    let nextEndIndex = response.endIndex;\n    let len = response.numFetched;\n\n    if (len >= 1024) {\n        let subUtxos = await platformGetAllUTXOsForAddresses(addrs, nextEndIndex);\n        return utxoSet.merge(subUtxos);\n    }\n\n    return utxoSet;\n}\n","import { BN } from '@zee-ava/avajs';\nimport { ChainIdType } from '@/types';\nimport {\n    UniversalTx,\n    UniversalTxActionExport,\n    UniversalTxActionImport,\n    UniversalTxExport,\n    UniversalTxImport,\n} from './types';\n\nexport abstract class UniversalNodeAbstract {\n    parents: UniversalNodeAbstract[];\n    child: UniversalNodeAbstract | null; // can only have 1 child\n    balance: BN;\n    chain: ChainIdType;\n    feeExport: BN;\n    feeImport: BN;\n\n    protected constructor(balance: BN, chain: ChainIdType, feeExport: BN, feeImport: BN) {\n        this.parents = [];\n        this.child = null;\n        this.balance = balance;\n        this.chain = chain;\n        this.feeExport = feeExport;\n        this.feeImport = feeImport;\n    }\n\n    // Sum of the node's balance + all balance of parents minus the transfer fees\n    reduceTotalBalanceFromParents(): BN {\n        // If there are no balance return balance of self\n        if (this.parents.length === 0) {\n            return this.balance;\n        }\n\n        let parentBals = this.parents.map((node) => {\n            // Subtract transfer fees from parent balance\n            // import + export\n            let parentBalance = node.reduceTotalBalanceFromParents();\n            parentBalance = parentBalance.sub(this.feeImport).sub(node.feeExport);\n            let zero = new BN(0);\n            return BN.max(parentBalance, zero);\n        });\n\n        let tot = parentBals.reduce((prev, current) => {\n            return prev.add(current);\n        }, new BN(0));\n\n        return tot.add(this.balance);\n    }\n\n    /**\n     * Returns the export action type from this node to its child\n     * @param to\n     */\n    abstract getExportMethod(to: ChainIdType): UniversalTxActionExport;\n\n    /**\n     * Returns the import action type from this node to its child\n     * @param from Which chain are we importing from\n     */\n    abstract getImportMethod(from: ChainIdType): UniversalTxActionImport;\n\n    buildExportTx(destChain: ChainIdType, amount: BN): UniversalTxExport {\n        return {\n            action: this.getExportMethod(destChain),\n            amount: amount,\n            fee: this.feeExport,\n        };\n    }\n\n    buildImportTx(sourceChain: ChainIdType): UniversalTxImport {\n        return {\n            action: this.getImportMethod(sourceChain),\n            fee: this.feeImport,\n        };\n    }\n\n    /***\n     * Assumes there is enough balance on node tree\n     * Returns empty array even if transaction not possible!\n     * What steps to take to have the target balance on this node.\n     * @param target Amount of nAXC needed on this node.\n     */\n    getStepsForTargetBalance(target: BN): UniversalTx[] {\n        // If the node has enough balance no transaction needed\n        // If target is negative or zero no transaction needed\n        if (this.balance.gte(target) || target.lte(new BN(0))) {\n            return [];\n        }\n\n        // If not enough balance and no parents\n        // return all the balance\n        if (this.balance.lt(target) && this.parents.length === 0) {\n            return [];\n        }\n\n        // If not enough balance on this node, try to collect it from parents\n        // Amount needed to collect from parents\n        let remaining = target.sub(this.balance);\n\n        let transactions = [];\n        for (let i = 0; i < this.parents.length; i++) {\n            let p = this.parents[i];\n\n            if (remaining.lte(new BN(0))) break;\n\n            // Parent's balance\n            let pBal = p.reduceTotalBalanceFromParents();\n            const exportFee = p.feeExport;\n            const importFee = this.feeImport;\n            const feeImportExport = exportFee.add(importFee);\n            // Maximum balance we can import from parent\n            let pBalMax = pBal.sub(feeImportExport);\n            // The parent needs to have this balance to satisfy the needed amount\n\n            // Try to export the remaining amount, if the parent balance is lower than that export the maximum amount\n            // Import amount is the usable amount imported\n            const importAmt = BN.min(pBalMax, remaining); // The amount that will cross to the target chain\n            // Exported amount should include the import fees\n            const exportAmt = importAmt.add(importFee);\n\n            if (exportAmt.lte(new BN(0))) continue;\n\n            let pTx = p.buildExportTx(this.chain, exportAmt);\n            let importTx = this.buildImportTx(p.chain);\n\n            transactions.push(pTx);\n            transactions.push(importTx);\n\n            remaining = remaining.sub(importAmt);\n        }\n\n        // If we still have remaining balance, we can not complete this transfer\n        if (remaining.gt(new BN(0))) {\n            throw new Error('Insufficient AXC balances.');\n        }\n\n        return transactions;\n    }\n\n    addParent(node: UniversalNodeAbstract) {\n        this.parents.push(node);\n    }\n\n    setChild(node: UniversalNodeAbstract) {\n        this.child = node;\n    }\n}\n","import { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\nimport { ExportChainsX } from '@/Wallet/types';\nimport {\n    UniversalTxActionExportX,\n    UniversalTxActionImportX,\n    UniversalTxExportX,\n    UniversalTxImportX,\n} from '@/UniversalTx/types';\nimport { BN } from '@zee-ava/avajs';\n\nexport default class UniversalNodeX extends UniversalNodeAbstract {\n    constructor(balance: BN, feeExport: BN, feeImport: BN) {\n        super(balance, 'X', feeExport, feeImport);\n    }\n\n    buildExportTx(destChain: ExportChainsX, amount: BN): UniversalTxExportX {\n        return super.buildExportTx(destChain, amount) as UniversalTxExportX;\n    }\n\n    buildImportTx(sourceChain: ExportChainsX): UniversalTxImportX {\n        return super.buildImportTx(sourceChain) as UniversalTxImportX;\n    }\n\n    getExportMethod(to: ExportChainsX): UniversalTxActionExportX {\n        if (to === 'P') {\n            return 'export_x_p';\n        } else {\n            return 'export_x_c';\n        }\n    }\n\n    getImportMethod(from: ExportChainsX): UniversalTxActionImportX {\n        if (from === 'P') {\n            return 'import_p_x';\n        } else {\n            return 'import_c_x';\n        }\n    }\n}\n","import { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\nimport { ExportChainsP } from '@/Wallet/types';\nimport {\n    UniversalTxActionExportP,\n    UniversalTxActionImportP,\n    UniversalTxExportP,\n    UniversalTxImportP,\n} from '@/UniversalTx/types';\nimport { BN } from '@zee-ava/avajs';\n\nexport default class UniversalNodeP extends UniversalNodeAbstract {\n    constructor(balance: BN, feeExport: BN, feeImport: BN) {\n        super(balance, 'P', feeExport, feeImport);\n    }\n\n    buildExportTx(destChain: ExportChainsP, amount: BN): UniversalTxExportP {\n        return super.buildExportTx(destChain, amount) as UniversalTxExportP;\n    }\n\n    buildImportTx(sourceChain: ExportChainsP): UniversalTxImportP {\n        return super.buildImportTx(sourceChain) as UniversalTxImportP;\n    }\n\n    getExportMethod(to: ExportChainsP): UniversalTxActionExportP {\n        if (to === 'X') {\n            return 'export_p_x';\n        } else {\n            return 'export_p_c';\n        }\n    }\n\n    getImportMethod(from: ExportChainsP): UniversalTxActionImportP {\n        if (from === 'X') {\n            return 'import_x_p';\n        } else {\n            return 'import_c_p';\n        }\n    }\n}\n","import { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\nimport { ExportChainsC } from '@/Wallet/types';\nimport {\n    UniversalTxActionExportC,\n    UniversalTxActionImportC,\n    UniversalTxExportC,\n    UniversalTxImportC,\n} from '@/UniversalTx/types';\nimport { BN } from '@zee-ava/avajs';\n\nexport default class UniversalNodeC extends UniversalNodeAbstract {\n    constructor(balance: BN, feeExport: BN, feeImport: BN) {\n        super(balance, 'C', feeExport, feeImport);\n    }\n\n    buildExportTx(destChain: ExportChainsC, amount: BN): UniversalTxExportC {\n        return super.buildExportTx(destChain, amount) as UniversalTxExportC;\n    }\n\n    buildImportTx(sourceChain: ExportChainsC): UniversalTxImportC {\n        return super.buildImportTx(sourceChain) as UniversalTxImportC;\n    }\n\n    getExportMethod(to: ExportChainsC): UniversalTxActionExportC {\n        if (to === 'X') {\n            return 'export_c_x';\n        } else {\n            return 'export_c_p';\n        }\n    }\n\n    getImportMethod(from: ExportChainsC): UniversalTxActionImportC {\n        if (from === 'X') {\n            return 'import_x_c';\n        } else {\n            return 'import_p_c';\n        }\n    }\n}\n","import { BN } from '@zee-ava/avajs';\nimport { UniversalTx } from '@/UniversalTx/types';\nimport UniversalNodeX from '@/UniversalTx/UniversalNodeX';\nimport UniversalNodeP from '@/UniversalTx/UniversalNodeP';\nimport UniversalNodeC from '@/UniversalTx/UniversalNodeC';\n\nexport function createGraphForP(balX: BN, balP: BN, balC: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeP {\n    let xNode = new UniversalNodeX(balX, atomicFeeXP, atomicFeeXP);\n    let pNode = new UniversalNodeP(balP, atomicFeeXP, atomicFeeXP);\n    let cNode = new UniversalNodeC(balC, atomicFeeC, atomicFeeC);\n\n    pNode.addParent(xNode);\n    pNode.addParent(cNode);\n\n    cNode.setChild(pNode);\n    xNode.setChild(pNode);\n    return pNode;\n}\n\nexport function createGraphForC(balX: BN, balP: BN, balC: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeC {\n    let xNode = new UniversalNodeX(balX, atomicFeeXP, atomicFeeXP);\n    let pNode = new UniversalNodeP(balP, atomicFeeXP, atomicFeeXP);\n    let cNode = new UniversalNodeC(balC, atomicFeeC, atomicFeeC);\n\n    cNode.addParent(xNode);\n    cNode.addParent(pNode);\n\n    pNode.setChild(cNode);\n    xNode.setChild(cNode);\n\n    return cNode;\n}\n\nexport function createGraphForX(balX: BN, balP: BN, balC: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeX {\n    let xNode = new UniversalNodeX(balX, atomicFeeXP, atomicFeeXP);\n    let pNode = new UniversalNodeP(balP, atomicFeeXP, atomicFeeXP);\n    let cNode = new UniversalNodeC(balC, atomicFeeC, atomicFeeC);\n\n    xNode.addParent(pNode);\n    xNode.addParent(cNode);\n\n    cNode.setChild(xNode);\n    pNode.setChild(xNode);\n\n    return xNode;\n}\n\nexport function canHaveBalanceOnX(\n    balX: BN,\n    balP: BN,\n    balC: BN,\n    targetAmount: BN,\n    atomicFeeXP: BN,\n    atomicFeeC: BN\n): boolean {\n    let startNode = createGraphForX(balX, balP, balC, atomicFeeXP, atomicFeeC);\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\n}\n\nexport function canHaveBalanceOnP(\n    balX: BN,\n    balP: BN,\n    balC: BN,\n    targetAmount: BN,\n    atomicFeeXP: BN,\n    atomicFeeC: BN\n): boolean {\n    let startNode = createGraphForP(balX, balP, balC, atomicFeeXP, atomicFeeC);\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\n}\n\n/**\n * Will return true if `targetAmount` can exist on C chain\n */\nexport function canHaveBalanceOnC(\n    balX: BN,\n    balP: BN,\n    balC: BN,\n    targetAmount: BN,\n    atomicFeeXP: BN,\n    atomicFeeC: BN\n): boolean {\n    let startNode = createGraphForC(balX, balP, balC, atomicFeeXP, atomicFeeC);\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\n}\n\nexport function getStepsForBalanceP(\n    balX: BN,\n    balP: BN,\n    balC: BN,\n    targetAmount: BN,\n    atomicFeeXP: BN,\n    atomicFeeC: BN\n): UniversalTx[] {\n    let startNode = createGraphForP(balX, balP, balC, atomicFeeXP, atomicFeeC);\n\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\n        throw new Error('Insufficient AXC.');\n    }\n\n    return startNode.getStepsForTargetBalance(targetAmount);\n}\n\nexport function getStepsForBalanceC(\n    balX: BN,\n    balP: BN,\n    balC: BN,\n    targetAmount: BN,\n    atomicFeeXP: BN,\n    atomicFeeC: BN\n): UniversalTx[] {\n    let startNode = createGraphForC(balX, balP, balC, atomicFeeXP, atomicFeeC);\n\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\n        throw new Error('Insufficient AXC.');\n    }\n\n    return startNode.getStepsForTargetBalance(targetAmount);\n}\n\nexport function getStepsForBalanceX(\n    balX: BN,\n    balP: BN,\n    balC: BN,\n    targetAmount: BN,\n    atomicFeeXP: BN,\n    atomicFeeC: BN\n): UniversalTx[] {\n    let startNode = createGraphForX(balX, balP, balC, atomicFeeXP, atomicFeeC);\n\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\n        throw new Error('Insufficient AXC.');\n    }\n\n    return startNode.getStepsForTargetBalance(targetAmount);\n}\n","import { activeNetwork, cChain, web3 } from '@/Network/network';\nimport { BN } from '@zee-ava/avajs';\nimport { EVMInput, ExportTx, SECPTransferOutput, TransferableOutput, UnsignedTx } from '@zee-ava/avajs/dist/apis/evm';\nimport { ExportChainsC } from '@/Wallet/types';\nimport { bintools } from '@/common';\nimport { chainIdFromAlias } from '@/Network';\nimport { costExportTx, costImportTx } from '@zee-ava/avajs/dist/utils';\nimport { buildEvmExportTransaction } from '@/helpers/tx_helper';\n\nconst MAX_GAS = new BN(1000_000_000_000);\n\n/**\n * Returns the current gas price in WEI from the network\n */\nexport async function getGasPrice(): Promise<BN> {\n    return new BN(await web3.eth.getGasPrice());\n}\n\n/**\n * Returns the gas price + 25%, or max gas\n */\nexport async function getAdjustedGasPrice(): Promise<BN> {\n    let gasPrice = await getGasPrice();\n    let adjustedGas = adjustValue(gasPrice, 25);\n    return BN.min(adjustedGas, MAX_GAS);\n}\n\n/**\n *\n * @param val\n * @param perc What percentage to adjust with\n */\nexport function adjustValue(val: BN, perc: number) {\n    let padAmt = val.div(new BN(100)).mul(new BN(perc));\n    return val.add(padAmt);\n}\n\n/**\n * Returns the base fee from the network.\n */\nexport async function getBaseFee(): Promise<BN> {\n    const rawHex = (await cChain.getBaseFee()).substring(2);\n    return new BN(rawHex, 'hex');\n}\n\n/**\n * Returns the current base fee + 25%\n */\nexport async function getBaseFeeRecommended() {\n    const baseFee = await getBaseFee();\n    return adjustValue(baseFee, 25);\n}\n\n/**\n * Returns the base max priority fee from the network.\n */\nexport async function getMaxPriorityFee(): Promise<BN> {\n    const rawHex = (await cChain.getMaxPriorityFeePerGas()).substring(2);\n    return new BN(rawHex, 'hex');\n}\n\n/**\n * Calculate max fee for EIP 1559 transactions given baseFee and maxPriorityFee.\n * According to https://www.blocknative.com/blog/eip-1559-fees\n * @param baseFee in WEI\n * @param maxPriorityFee in WEI\n */\nexport function calculateMaxFee(baseFee: BN, maxPriorityFee: BN): BN {\n    return baseFee.mul(new BN(2)).add(maxPriorityFee);\n}\n\n/**\n * Creates a mock import transaction and estimates the gas required for it. Returns fee in units of gas.\n * @param numIns Number of inputs for the import transaction.\n * @param numSigs Number of signatures used in the import transactions. This value is the sum of owner addresses in every UTXO.\n */\nexport function estimateImportGasFeeFromMockTx(\n    numIns = 1,\n    numSigs: number // number of signatures (sum of owner addresses in each utxo)\n): number {\n    const ATOMIC_TX_COST = 10000; // in gas\n    const SIG_COST = 1000; // in gas\n    const BASE_TX_SIZE = 78;\n    const SINGLE_OWNER_INPUT_SIZE = 90; // in bytes\n    const OUTPUT_SIZE = 60; // in bytes\n\n    // C chain imports consolidate inputs to one output\n    const numOutputs = 1;\n    // Assuming each input has 1 owner\n    const baseSize = BASE_TX_SIZE + numIns * SINGLE_OWNER_INPUT_SIZE + numOutputs * OUTPUT_SIZE;\n    const importGas = baseSize + numSigs * SIG_COST + ATOMIC_TX_COST;\n\n    return importGas;\n}\n\n/**\n * Estimates the gas fee using a mock ExportTx built from the passed values.\n * @param destinationChain `X` or `P`\n * @param amount in nAXC\n * @param from The C chain hex address exported from\n * @param to The destination X or P address\n */\nexport function estimateExportGasFeeFromMockTx(\n    destinationChain: ExportChainsC,\n    amount: BN,\n    from: string,\n    to: string\n): number {\n    const destChainId = chainIdFromAlias(destinationChain);\n    const destChainIdBuff = bintools.cb58Decode(destChainId);\n    const toBuff = bintools.stringToAddress(to);\n    const netID = activeNetwork.networkID;\n    const chainID = activeNetwork.cChainID;\n    const AXC_ID = activeNetwork.axcID;\n    const axcIDBuff = bintools.cb58Decode(AXC_ID);\n\n    const txIn = new EVMInput(from, amount, axcIDBuff);\n    const secpOut = new SECPTransferOutput(amount, [toBuff]);\n    const txOut = new TransferableOutput(axcIDBuff, secpOut);\n\n    // Create fake export Tx\n    const chainIdBuff = bintools.cb58Decode(chainID);\n    const exportTx = new ExportTx(netID, chainIdBuff, destChainIdBuff, [txIn], [txOut]);\n\n    const unisgnedTx = new UnsignedTx(exportTx);\n\n    return costExportTx(unisgnedTx);\n}\n\n/**\n * Returns the estimated gas for the export transaction.\n * @param destinationChain Either `X` or `P`\n * @param amount The amount to export. In nAXC.\n * @param from The C chain hex address exporting the asset\n * @param fromBech The C chain bech32 address exporting the asset\n * @param to The destination address on the destination chain\n */\nexport async function estimateExportGasFee(\n    destinationChain: ExportChainsC,\n    from: string,\n    fromBech: string,\n    to: string,\n    amount: BN\n): Promise<number> {\n    let exportTx = await buildEvmExportTransaction([from], to, amount, fromBech, destinationChain, new BN(0));\n\n    return costExportTx(exportTx);\n}\n","import {\n    AssetBalanceP,\n    AssetBalanceRawX,\n    AssetBalanceX,\n    ERC20Balance,\n    ExportChainsC,\n    ExportChainsP,\n    ExportChainsX,\n    iAxcBalance,\n    WalletBalanceX,\n    WalletEventArgsType,\n    WalletEventType,\n    WalletNameType,\n} from './types';\nimport {\n    buildAvmExportTransaction,\n    buildCreateNftFamilyTx,\n    buildCustomEvmTx,\n    buildEvmExportTransaction,\n    buildEvmTransferEIP1559Tx,\n    buildEvmTransferErc20Tx,\n    buildEvmTransferNativeTx,\n    buildMintNftTx,\n    buildPlatformExportTransaction,\n    estimateAxcGas,\n    estimateErc20Gas,\n} from '@/helpers/tx_helper';\nimport { BN, Buffer } from '@zee-ava/avajs';\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\nimport { activeNetwork, axia, cChain, pChain, web3, xChain } from '@/Network/network';\nimport EvmWallet from '@/Wallet/EvmWallet';\n\nimport {\n    avmGetAllUTXOs,\n    avmGetAtomicUTXOs,\n    evmGetAtomicUTXOs,\n    getStakeForAddresses,\n    platformGetAllUTXOs,\n    platformGetAtomicUTXOs,\n} from '@/helpers/utxo_helper';\n\nimport {\n    UTXOSet as AVMUTXOSet,\n    UnsignedTx as AVMUnsignedTx,\n    UTXO as AVMUTXO,\n    Tx as AvmTx,\n    AVMConstants,\n    AmountOutput,\n} from '@zee-ava/avajs/dist/apis/avm';\nimport {\n    UTXOSet as PlatformUTXOSet,\n    UTXO as PlatformUTXO,\n    UnsignedTx as PlatformUnsignedTx,\n    Tx as PlatformTx,\n    PlatformVMConstants,\n    StakeableLockOut,\n} from '@zee-ava/avajs/dist/apis/platformvm';\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx, UTXOSet as EVMUTXOSet } from '@zee-ava/avajs/dist/apis/evm';\n\nimport { PayloadBase, UnixNow } from '@zee-ava/avajs/dist/utils';\nimport { getAssetDescription } from '@/Asset/Assets';\nimport { getErc20Token } from '@/Asset/Erc20';\nimport { NO_NETWORK } from '@/errors';\nimport { axcCtoX, bnToLocaleString, getTxFeeP, getTxFeeX, waitTxC, waitTxEvm, waitTxP, waitTxX } from '@/utils';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport EventEmitter from 'events';\nimport {\n    filterDuplicateTransactions,\n    getAddressHistory,\n    getAddressHistoryEVM,\n    getTransactionSummary,\n    getTransactionSummaryEVM,\n    getTx,\n    getTxEvm,\n    HistoryItemType,\n    ITransactionData,\n} from '@/History';\nimport { bintools } from '@/common';\nimport { ChainIdType } from '@/types';\nimport {\n    createGraphForC,\n    createGraphForP,\n    createGraphForX,\n    getStepsForBalanceC,\n    getStepsForBalanceP,\n    getStepsForBalanceX,\n    UniversalTx,\n} from '@/UniversalTx';\nimport { UniversalNodeAbstract } from '@/UniversalTx/UniversalNode';\nimport { GetStakeResponse } from '@zee-ava/avajs/dist/apis/platformvm/interfaces';\nimport { networkEvents } from '@/Network/eventEmitter';\nimport { NetworkConfig } from '@/Network';\nimport { chainIdFromAlias } from '@/Network/helpers/idFromAlias';\nimport {\n    estimateExportGasFee,\n    estimateExportGasFeeFromMockTx,\n    estimateImportGasFeeFromMockTx,\n    getBaseFeeRecommended,\n} from '@/helpers/gas_helper';\n\nexport abstract class WalletProvider {\n    abstract type: WalletNameType;\n    abstract evmWallet: EvmWallet | EvmWalletReadonly;\n\n    /**\n     * The X chain UTXOs of the wallet's current state\n     */\n    public utxosX: AVMUTXOSet = new AVMUTXOSet();\n\n    /**\n     * The P chain UTXOs of the wallet's current state\n     */\n    public utxosP: PlatformUTXOSet = new PlatformUTXOSet();\n\n    public balanceX: WalletBalanceX = {};\n\n    abstract signEvm(tx: Transaction | FeeMarketEIP1559Transaction): Promise<Transaction | FeeMarketEIP1559Transaction>;\n    abstract signX(tx: AVMUnsignedTx): Promise<AvmTx>;\n    abstract signP(tx: PlatformUnsignedTx): Promise<PlatformTx>;\n    abstract signC(tx: EVMUnsignedTx): Promise<EVMTx>;\n\n    abstract getAddressX(): string;\n    abstract getChangeAddressX(): string;\n    abstract getAddressP(): string;\n    abstract getAddressC(): string;\n    abstract getEvmAddressBech(): string;\n\n    abstract getExternalAddressesX(): Promise<string[]>;\n    abstract getExternalAddressesXSync(): string[];\n    abstract getInternalAddressesX(): Promise<string[]>;\n    abstract getInternalAddressesXSync(): string[];\n    abstract getExternalAddressesP(): Promise<string[]>;\n    abstract getExternalAddressesPSync(): string[];\n\n    abstract getAllAddressesX(): Promise<string[]>;\n    abstract getAllAddressesXSync(): string[];\n    abstract getAllAddressesP(): Promise<string[]>;\n    abstract getAllAddressesPSync(): string[];\n\n    protected constructor() {\n        networkEvents.on('network_change', this.onNetworkChange.bind(this));\n    }\n\n    /**\n     * Call after getting done with the wallet to avoi memory leaks and remove event listeners\n     */\n    public destroy() {\n        networkEvents.off('network_change', this.onNetworkChange);\n    }\n\n    /**\n     * Fired when the network changes\n     * @param config\n     * @protected\n     */\n    //@ts-ignore\n    protected onNetworkChange(config: NetworkConfig) {}\n\n    /***\n     * Used to get an identifier string that is consistent across different network connections.\n     * Currently returns the C address of this wallet.\n     */\n    public getBaseAddress(): string {\n        return this.getAddressC();\n    }\n\n    protected emitter: EventEmitter = new EventEmitter();\n\n    public on(event: WalletEventType, listener: (...args: any[]) => void): void {\n        this.emitter.on(event, listener);\n    }\n\n    public off(event: WalletEventType, listener: (...args: any[]) => void): void {\n        this.emitter.off(event, listener);\n    }\n\n    protected emit(event: WalletEventType, args?: WalletEventArgsType): void {\n        this.emitter.emit(event, args);\n    }\n\n    protected emitAddressChange(): void {\n        this.emit('addressChanged', {\n            X: this.getAddressX(),\n            changeX: this.getChangeAddressX(),\n            P: this.getAddressP(),\n        });\n    }\n\n    protected emitBalanceChangeX(): void {\n        this.emit('balanceChangedX', this.balanceX);\n    }\n\n    protected emitBalanceChangeP(): void {\n        this.emit('balanceChangedP', this.getAxcBalanceP());\n    }\n\n    protected emitBalanceChangeC(): void {\n        this.emit('balanceChangedC', this.getAxcBalanceC());\n    }\n\n    /**\n     *\n     * @param to - the address funds are being send to.\n     * @param amount - amount of AXC to send in nAXC\n     * @param memo - A MEMO for the transaction\n     */\n    async sendAxcX(to: string, amount: BN, memo?: string): Promise<string> {\n        if (!activeNetwork) throw NO_NETWORK;\n\n        let memoBuff = memo ? Buffer.from(memo) : undefined;\n\n        let froms = await this.getAllAddressesX();\n        let changeAddress = this.getChangeAddressX();\n        let utxoSet = this.utxosX;\n\n        let tx = await xChain.buildBaseTx(\n            utxoSet,\n            amount,\n            activeNetwork.axcID,\n            [to],\n            froms,\n            [changeAddress],\n            memoBuff\n        );\n        let signedTx = await this.signX(tx);\n        let txId = await xChain.issueTx(signedTx);\n        await waitTxX(txId);\n\n        // Update UTXOs\n        this.updateUtxosX();\n\n        return txId;\n    }\n\n    /**\n     * Sends AXC to another address on the C chain using legacy transaction format.\n     * @param to Hex address to send AXC to.\n     * @param amount Amount of AXC to send, represented in WEI format.\n     * @param gasPrice Gas price in WEI format\n     * @param gasLimit Gas limit\n     *\n     * @return Returns the transaction hash\n     */\n    async sendAxcC(to: string, amount: BN, gasPrice: BN, gasLimit: number): Promise<string> {\n        let fromAddr = this.getAddressC();\n        let tx = await buildEvmTransferNativeTx(fromAddr, to, amount, gasPrice, gasLimit);\n        let txId = await this.issueEvmTx(tx);\n        await this.updateAxcBalanceC();\n        return txId;\n    }\n\n    /**\n     * Send Axia Native Tokens on X chain\n     * @param assetID ID of the token to send\n     * @param amount How many units of the token to send. Based on smallest divisible unit.\n     * @param to X chain address to send tokens to\n     */\n    async sendANT(assetID: string, amount: BN, to: string): Promise<string> {\n        let utxoSet = this.getUtxosX();\n        let fromAddrs = await this.getAllAddressesX();\n        let changeAddr = this.getChangeAddressX();\n\n        let tx = await xChain.buildBaseTx(utxoSet, amount, assetID, [to], fromAddrs, [changeAddr]);\n        let signed = await this.signX(tx);\n        let txId = await xChain.issueTx(signed);\n        await waitTxX(txId);\n\n        this.updateUtxosX();\n        return txId;\n    }\n\n    /**\n     * Makes a transfer call on a ERC20 contract.\n     * @param to Hex address to transfer tokens to.\n     * @param amount Amount of the ERC20 token to send, donated in the token's correct denomination.\n     * @param gasPrice Gas price in WEI format\n     * @param gasLimit Gas limit\n     * @param contractAddress Contract address of the ERC20 token\n     */\n    async sendErc20(to: string, amount: BN, gasPrice: BN, gasLimit: number, contractAddress: string): Promise<string> {\n        let fromAddr = this.getAddressC();\n        let token = await getErc20Token(contractAddress);\n        let balOld = await token.balanceOf(fromAddr);\n        let tx = await buildEvmTransferErc20Tx(fromAddr, to, amount, gasPrice, gasLimit, contractAddress);\n        let txHash = await this.issueEvmTx(tx);\n\n        // TODO: We should not be using setTimeout, wait until tx is confirmed on chain\n        // TODO: Can it be an issue with sticky sessions? Nodes behind a LB?\n        // If new balance doesnt match old, emit balance change\n        setTimeout(async () => {\n            let balNew = await token.balanceOf(fromAddr);\n            if (!balOld.eq(balNew)) {\n                this.emitBalanceChangeC();\n            }\n        }, 2000);\n\n        return txHash;\n    }\n\n    /**\n     * Estimate the gas needed for an ERC20 Transfer transaction\n     * @param contractAddress The ERC20 contract address\n     * @param to Address receiving the tokens\n     * @param amount Amount to send. Given in the smallest divisible unit.\n     */\n    async estimateErc20Gas(contractAddress: string, to: string, amount: BN): Promise<number> {\n        let from = this.getAddressC();\n        return await estimateErc20Gas(contractAddress, from, to, amount);\n    }\n\n    /**\n     * Estimate gas limit for the given inputs.\n     * @param to\n     * @param data\n     */\n    async estimateGas(to: string, data: string) {\n        const from = this.getAddressC();\n        const nonce = await web3.eth.getTransactionCount(from);\n        return await web3.eth.estimateGas({\n            from: from,\n            nonce: nonce,\n            to: to,\n            data: data,\n        });\n    }\n\n    /**\n     * Estimate the gas needed for a AXC send transaction on the C chain.\n     * @param to Destination address.\n     * @param amount Amount of AXC to send, in WEI.\n     */\n    async estimateAxcGasLimit(to: string, amount: BN, gasPrice: BN): Promise<number> {\n        let from = this.getAddressC();\n        return await estimateAxcGas(from, to, amount, gasPrice);\n    }\n\n    /**\n     * A method to create custom EVM transactions.\n     * @param gasPrice\n     * @param gasLimit\n     * @param data `data` field of the transaction, in hex format\n     * @param to `to` field of the transaction, in hex format\n     * @param value `value` field of the transaction, in hex format\n     * @param nonce Nonce of the transaction, in number. If not provided, SDK will get the latest nonce from the network\n     */\n    async sendCustomEvmTx(gasPrice: BN, gasLimit: number, data?: string, to?: string, value?: string, nonce?: number) {\n        let from = this.getAddressC();\n        let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, to, value, nonce);\n        return await this.issueEvmTx(tx);\n    }\n\n    /**\n     * Returns the maximum spendable AXC balance for the given chain.\n     * Scans all chains and take cross over fees into account\n     * @param chainType X, P or C\n     */\n    public getUsableAxcBalanceForChain(chainType: ChainIdType, atomicFeeXP: BN, atomicFeeC: BN): BN {\n        return this.createUniversalNode(chainType, atomicFeeXP, atomicFeeC).reduceTotalBalanceFromParents();\n    }\n\n    /**\n     * Create a new instance of a UniversalNode for the given chain using current balance state\n     * @param chain Chain of the universal node.\n     * @private\n     */\n    private createUniversalNode(chain: ChainIdType, atomicFeeXP: BN, atomicFeeC: BN): UniversalNodeAbstract {\n        let xBal = this.getAxcBalanceX().unlocked;\n        let pBal = this.getAxcBalanceP().unlocked;\n        let cBal = axcCtoX(this.getAxcBalanceC()); // need to use 9 decimal places\n\n        switch (chain) {\n            case 'X':\n                return createGraphForX(xBal, pBal, cBal, atomicFeeXP, atomicFeeC);\n            case 'P':\n                return createGraphForP(xBal, pBal, cBal, atomicFeeXP, atomicFeeC);\n            case 'C':\n                return createGraphForC(xBal, pBal, cBal, atomicFeeXP, atomicFeeC);\n        }\n    }\n\n    /**\n     * Can this wallet have the given amount on the given chain after a series of internal transactions (if required).\n     * @param chain X/P/C\n     * @param amount The amount to check against\n     */\n    public canHaveBalanceOnChain(chain: ChainIdType, amount: BN, atomicFeeXP: BN, atomicFeeC: BN): boolean {\n        // The maximum amount of AXC we can have on this chain\n        let maxAmt = this.createUniversalNode(chain, atomicFeeXP, atomicFeeC).reduceTotalBalanceFromParents();\n        return maxAmt.gte(amount);\n    }\n\n    /**\n     * Returns an array of transaction to do in order to have the target amount on the given chain\n     * @param chain The chain (X/P/C) to have the desired amount on\n     * @param amount The desired amount\n     */\n    public getTransactionsForBalance(chain: ChainIdType, amount: BN, atomicFeeXP: BN, atomicFeeC: BN): UniversalTx[] {\n        let xBal = this.getAxcBalanceX().unlocked;\n        let pBal = this.getAxcBalanceP().unlocked;\n        let cBal = axcCtoX(this.getAxcBalanceC()); // need to use 9 decimal places\n\n        switch (chain) {\n            case 'P':\n                return getStepsForBalanceP(xBal, pBal, cBal, amount, atomicFeeXP, atomicFeeC);\n            case 'C':\n                return getStepsForBalanceC(xBal, pBal, cBal, amount, atomicFeeXP, atomicFeeC);\n            case 'X':\n                return getStepsForBalanceX(xBal, pBal, cBal, amount, atomicFeeXP, atomicFeeC);\n        }\n    }\n\n    /**\n     * Given a `Transaction`, it will sign and issue it to the network.\n     * @param tx The unsigned transaction to issue.\n     */\n    async issueEvmTx(tx: Transaction | FeeMarketEIP1559Transaction): Promise<string> {\n        let signedTx = await this.signEvm(tx);\n        let txHex = signedTx.serialize().toString('hex');\n        let hash = await web3.eth.sendSignedTransaction('0x' + txHex);\n        const txHash = hash.transactionHash;\n        return await waitTxEvm(txHash);\n    }\n\n    /**\n     * Returns the C chain AXC balance of the wallet in WEI format.\n     */\n    async updateAxcBalanceC(): Promise<BN> {\n        let balOld = this.evmWallet.getBalance();\n        let balNew = await this.evmWallet.updateBalance();\n\n        if (!balOld.eq(balNew)) {\n            this.emitBalanceChangeC();\n        }\n\n        return balNew;\n    }\n\n    /**\n     *  Returns UTXOs on the X chain that belong to this wallet.\n     *  - Makes network request.\n     *  - Updates `this.utxosX` with new UTXOs\n     *  - Calls `this.updateBalanceX()` after success.\n     *  */\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\n        const addresses = await this.getAllAddressesX();\n        this.utxosX = await avmGetAllUTXOs(addresses);\n\n        await this.updateUnknownAssetsX();\n        this.updateBalanceX();\n\n        return this.utxosX;\n    }\n\n    /**\n     *  Returns the fetched UTXOs on the X chain that belong to this wallet.\n     */\n    public getUtxosX(): AVMUTXOSet {\n        return this.utxosX;\n    }\n\n    /**\n     *  Returns UTXOs on the P chain that belong to this wallet.\n     *  - Makes network request.\n     *  - Updates `this.utxosP` with the new UTXOs\n     */\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\n        let addresses = await this.getAllAddressesP();\n        this.utxosP = await platformGetAllUTXOs(addresses);\n\n        this.emitBalanceChangeP();\n\n        return this.utxosP;\n    }\n\n    /**\n     * Returns the fetched UTXOs on the P chain that belong to this wallet.\n     */\n    public getUtxosP(): PlatformUTXOSet {\n        return this.utxosP;\n    }\n\n    /**\n     * Returns the number AXC staked by this wallet.\n     */\n    public async getStake(): Promise<GetStakeResponse> {\n        let addrs = await this.getAllAddressesP();\n        return await getStakeForAddresses(addrs);\n    }\n\n    /**\n     * Returns the wallet's balance of the given ERC20 contracts\n     * @param addresses ERC20 Contract addresses\n     */\n    public async getBalanceERC20(addresses: string[]): Promise<ERC20Balance[]> {\n        let walletAddr = this.getAddressC();\n        let tokenCalls = addresses.map((addr) => getErc20Token(addr));\n        let tokens = await Promise.all(tokenCalls);\n\n        let balanceCalls = tokens.map((token) => token.balanceOf(walletAddr));\n        let balances = await Promise.all(balanceCalls);\n\n        return balances.map((bal, i) => {\n            let token = tokens[i];\n            let balance: ERC20Balance = {\n                address: token.address,\n                denomination: token.decimals,\n                balanceParsed: bnToLocaleString(bal, token.decimals),\n                balance: bal,\n                name: token.name,\n                symbol: token.symbol,\n            };\n            return balance;\n        });\n    }\n\n    private async updateUnknownAssetsX() {\n        let utxos = this.utxosX.getAllUTXOs();\n\n        let assetIds = utxos.map((utxo) => {\n            let idBuff = utxo.getAssetID();\n            return bintools.cb58Encode(idBuff);\n        });\n        let uniqueIds = assetIds.filter((id, index) => {\n            return assetIds.indexOf(id) === index;\n        });\n\n        let promises = uniqueIds.map((id) => getAssetDescription(id));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Uses the X chain UTXOs owned by this wallet, gets asset description for unknown assets,\n     * and returns a dictionary of Asset IDs to balance amounts.\n     * - Updates `this.balanceX`\n     * - Expensive operation if there are unknown assets\n     * - Uses existing UTXOs\n     * @private\n     */\n    private async updateBalanceX(): Promise<WalletBalanceX> {\n        if (!activeNetwork) throw NO_NETWORK;\n        let utxos = this.utxosX.getAllUTXOs();\n\n        let unixNow = UnixNow();\n\n        let res: WalletBalanceX = {};\n\n        for (let i = 0; i < utxos.length; i++) {\n            let utxo = utxos[i];\n            let out = utxo.getOutput();\n            let type = out.getOutputID();\n\n            if (type != AVMConstants.SECPXFEROUTPUTID) continue;\n\n            let locktime = out.getLocktime();\n            let amount = (out as AmountOutput).getAmount();\n            let assetIdBuff = utxo.getAssetID();\n            let assetId = bintools.cb58Encode(assetIdBuff);\n\n            let asset: AssetBalanceX = res[assetId];\n\n            if (!asset) {\n                let assetInfo = await getAssetDescription(assetId);\n                asset = { locked: new BN(0), unlocked: new BN(0), meta: assetInfo };\n            }\n\n            if (locktime.lte(unixNow)) {\n                // not locked\n                asset.unlocked = asset.unlocked.add(amount);\n            } else {\n                // locked\n                asset.locked = asset.locked.add(amount);\n            }\n\n            res[assetId] = asset;\n        }\n\n        // If there are no AXC UTXOs create a dummy empty balance object\n        let axcID = activeNetwork.axcID;\n        if (!res[axcID]) {\n            let assetInfo = await getAssetDescription(axcID);\n            res[axcID] = {\n                locked: new BN(0),\n                unlocked: new BN(0),\n                meta: assetInfo,\n            };\n        }\n\n        this.balanceX = res;\n\n        // TODO: Check previous value\n        this.emitBalanceChangeX();\n        return res;\n    }\n\n    public getBalanceX(): WalletBalanceX {\n        return this.balanceX;\n    }\n\n    /**\n     * A helpful method that returns the AXC balance on X, P, C chains.\n     * Internally calls chain specific getAxcBalance methods.\n     */\n    public getAxcBalance(): iAxcBalance {\n        let X = this.getAxcBalanceX();\n        let P = this.getAxcBalanceP();\n        let C = this.getAxcBalanceC();\n\n        return {\n            X,\n            P,\n            C,\n        };\n    }\n\n    /**\n     * Returns the X chain AXC balance of the current wallet state.\n     * - Does not make a network request.\n     * - Does not refresh wallet balance.\n     */\n    public getAxcBalanceX(): AssetBalanceRawX {\n        if (!activeNetwork) {\n            throw new Error('Network not selected.');\n        }\n        return (\n            this.balanceX[activeNetwork.axcID] || {\n                unlocked: new BN(0),\n                locked: new BN(0),\n            }\n        );\n    }\n\n    public getAxcBalanceC(): BN {\n        return this.evmWallet.getBalance();\n    }\n\n    /**\n     * Returns the P chain AXC balance of the current wallet state.\n     * - Does not make a network request.\n     * - Does not refresh wallet balance.\n     */\n    public getAxcBalanceP(): AssetBalanceP {\n        let unlocked = new BN(0);\n        let locked = new BN(0);\n        let lockedStakeable = new BN(0);\n\n        let utxos = this.utxosP.getAllUTXOs();\n        let unixNow = UnixNow();\n\n        for (let i = 0; i < utxos.length; i++) {\n            let utxo = utxos[i];\n            let out = utxo.getOutput();\n            let type = out.getOutputID();\n\n            let amount = (out as AmountOutput).getAmount();\n\n            if (type === PlatformVMConstants.STAKEABLELOCKOUTID) {\n                let locktime = (out as StakeableLockOut).getStakeableLocktime();\n                if (locktime.lte(unixNow)) {\n                    unlocked.iadd(amount);\n                } else {\n                    lockedStakeable = lockedStakeable.add(amount);\n                }\n            } else {\n                let locktime = (out as AmountOutput).getLocktime();\n                if (locktime.lte(unixNow)) {\n                    unlocked.iadd(amount);\n                } else {\n                    locked.iadd(amount);\n                }\n            }\n        }\n\n        return {\n            unlocked,\n            locked,\n            lockedStakeable: lockedStakeable,\n        };\n    }\n\n    /**\n     * Exports AXC from P chain to X chain\n     * @remarks\n     * The export fee is added automatically to the amount. Make sure the exported amount includes the import fee for the destination chain.\n     *\n     * @param amt amount of nAXC to transfer. Fees excluded.\n     * @param destinationChain Either `X` or `C`\n     * @return returns the transaction id.\n     */\n    async exportPChain(amt: BN, destinationChain: ExportChainsP) {\n        let pChangeAddr = this.getAddressP();\n        let fromAddrs = await this.getAllAddressesP();\n\n        const destinationAddr = destinationChain === 'X' ? this.getAddressX() : this.getEvmAddressBech();\n\n        let utxoSet = this.utxosP;\n\n        const exportTx = await buildPlatformExportTransaction(\n            utxoSet,\n            fromAddrs,\n            destinationAddr,\n            amt,\n            pChangeAddr,\n            destinationChain\n        );\n\n        let tx = await this.signP(exportTx);\n        let txId = await pChain.issueTx(tx);\n        await waitTxP(txId);\n\n        await this.updateUtxosP();\n\n        return txId;\n    }\n\n    /***\n     * Estimates the required fee for a C chain export transaction\n     * @param destinationChain Either `X` or `P`\n     * @param baseFee Current base fee of the network, use a padded amount.\n     * @return BN C chain atomic export transaction fee in nAXC.\n     */\n    estimateAtomicFeeExportC(destinationChain: ExportChainsC, baseFee: BN): BN {\n        let destinationAddr = destinationChain === 'X' ? this.getAddressX() : this.getAddressP();\n        const hexAddr = this.getAddressC();\n        // The amount does not effect the fee that much\n        const amt = new BN(0);\n        const gas = estimateExportGasFeeFromMockTx(destinationChain, amt, hexAddr, destinationAddr);\n        return axcCtoX(baseFee.mul(new BN(gas)));\n    }\n\n    /**\n     * Exports AXC from C chain to X chain\n     * @remarks\n     * Make sure the exported `amt` includes the import fee for the destination chain.\n     *\n     * @param amt amount of nAXC to transfer\n     * @param destinationChain either `X` or `P`\n     * @param exportFee Export fee in nAXC\n     * @return returns the transaction id.\n     */\n    async exportCChain(amt: BN, destinationChain: ExportChainsC, exportFee?: BN): Promise<string> {\n        let hexAddr = this.getAddressC();\n        let bechAddr = this.getEvmAddressBech();\n\n        let fromAddresses = [hexAddr];\n        let destinationAddr = destinationChain === 'X' ? this.getAddressX() : this.getAddressP();\n\n        // Calculate export fee if it's not given.\n        if (!exportFee) {\n            const gas = estimateExportGasFeeFromMockTx(destinationChain, amt, hexAddr, destinationAddr);\n            const baseFee = await getBaseFeeRecommended();\n            exportFee = axcCtoX(baseFee.mul(new BN(gas)));\n        }\n\n        let exportTx = await buildEvmExportTransaction(\n            fromAddresses,\n            destinationAddr,\n            amt,\n            bechAddr,\n            destinationChain,\n            exportFee\n        );\n\n        let tx = await this.signC(exportTx);\n\n        let txId = await cChain.issueTx(tx);\n\n        await waitTxC(txId);\n\n        await this.updateAxcBalanceC();\n        return txId;\n    }\n\n    /**\n     * Exports AXC from X chain to either P or C chain\n     * @remarks\n     * The export fee will be added to the amount automatically. Make sure the exported amount has the import fee for the destination chain.\n     *\n     * @param amt amount of nAXC to transfer\n     * @param destinationChain Which chain to export to.\n     * @return returns the transaction id.\n     */\n    async exportXChain(amt: BN, destinationChain: ExportChainsX) {\n        let destinationAddr = destinationChain === 'P' ? this.getAddressP() : this.getEvmAddressBech();\n\n        let fromAddresses = await this.getAllAddressesX();\n        let changeAddress = this.getChangeAddressX();\n        let utxos = this.utxosX;\n        let exportTx = await buildAvmExportTransaction(\n            destinationChain,\n            utxos,\n            fromAddresses,\n            destinationAddr,\n            amt,\n            changeAddress\n        );\n\n        let tx = await this.signX(exportTx);\n\n        let txId = await xChain.issueTx(tx);\n        await waitTxX(txId);\n\n        // Update UTXOs\n        await this.updateUtxosX();\n\n        return txId;\n    }\n\n    async getAtomicUTXOsX(sourceChain: ExportChainsX) {\n        let addrs = await this.getAllAddressesX();\n        let result = await avmGetAtomicUTXOs(addrs, sourceChain);\n        return result;\n    }\n\n    async getAtomicUTXOsP(sourceChain: ExportChainsP): Promise<PlatformUTXOSet> {\n        let addrs = await this.getAllAddressesP();\n        return await platformGetAtomicUTXOs(addrs, sourceChain);\n    }\n\n    async getAtomicUTXOsC(sourceChain: ExportChainsC) {\n        const bechAddr = this.getEvmAddressBech();\n        return await evmGetAtomicUTXOs([bechAddr], sourceChain);\n    }\n\n    /**\n     * Imports atomic X chain UTXOs to the current active X chain address\n     * @param sourceChain The chain to import from, either `P` or `C`\n     */\n    async importX(sourceChain: ExportChainsX) {\n        const utxoSet = await this.getAtomicUTXOsX(sourceChain);\n\n        if (utxoSet.getAllUTXOs().length === 0) {\n            throw new Error('Nothing to import.');\n        }\n\n        let xToAddr = this.getAddressX();\n\n        let hrp = axia.getHRP();\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'X', addr));\n\n        let fromAddrs = utxoAddrs;\n        let ownerAddrs = utxoAddrs;\n\n        const sourceChainId = chainIdFromAlias(sourceChain);\n\n        // Owner addresses, the addresses we exported to\n        const unsignedTx = await xChain.buildImportTx(utxoSet, ownerAddrs, sourceChainId, [xToAddr], fromAddrs, [\n            xToAddr,\n        ]);\n\n        const tx = await this.signX(unsignedTx);\n        const txId = await xChain.issueTx(tx);\n\n        await waitTxX(txId);\n\n        // Update UTXOs\n        await this.updateUtxosX();\n\n        return txId;\n    }\n\n    /**\n     * Import utxos in atomic memory to the P chain.\n     * @param sourceChain Either `X` or `C`\n     * @param [toAddress] The destination P chain address assets will get imported to. Defaults to the P chain address of the wallet.\n     */\n    async importP(sourceChain: ExportChainsP, toAddress?: string): Promise<string> {\n        const utxoSet = await this.getAtomicUTXOsP(sourceChain);\n\n        if (utxoSet.getAllUTXOs().length === 0) {\n            throw new Error('Nothing to import.');\n        }\n\n        // Owner addresses, the addresses we exported to\n        let walletAddrP = this.getAddressP();\n\n        let hrp = axia.getHRP();\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'P', addr));\n\n        let ownerAddrs = utxoAddrs;\n\n        if (!toAddress) {\n            toAddress = walletAddrP;\n        }\n\n        const sourceChainId = chainIdFromAlias(sourceChain);\n\n        const unsignedTx = await pChain.buildImportTx(\n            utxoSet,\n            ownerAddrs,\n            sourceChainId,\n            [toAddress],\n            ownerAddrs,\n            [walletAddrP],\n            undefined,\n            undefined\n        );\n        const tx = await this.signP(unsignedTx);\n        const txId = await pChain.issueTx(tx);\n\n        await waitTxP(txId);\n\n        await this.updateUtxosP();\n\n        return txId;\n    }\n\n    /**\n     *\n     * @param sourceChain Which chain to import from. `X` or `P`\n     * @param [fee] The import fee to use in the transactions. If omitted the SDK will try to calculate the fee. For deterministic transactions you should always pre calculate and provide this value.\n     * @param [utxoSet] If omitted imports all atomic UTXOs.\n     */\n    async importC(sourceChain: ExportChainsC, fee?: BN, utxoSet?: EVMUTXOSet) {\n        let bechAddr = this.getEvmAddressBech();\n\n        if (!utxoSet) {\n            utxoSet = await this.getAtomicUTXOsC(sourceChain);\n        }\n\n        const utxos = utxoSet.getAllUTXOs();\n        if (utxos.length === 0) {\n            throw new Error('Nothing to import.');\n        }\n\n        let toAddress = this.getAddressC();\n        let ownerAddresses = [bechAddr];\n        let fromAddresses = ownerAddresses;\n        const sourceChainId = chainIdFromAlias(sourceChain);\n\n        // Calculate fee if not provided\n        if (!fee) {\n            // Calculate number of signatures\n            const numSigs = utxos.reduce((acc, utxo) => {\n                return acc + utxo.getOutput().getAddresses().length;\n            }, 0);\n            const numIns = utxos.length;\n\n            const importGas = estimateImportGasFeeFromMockTx(numIns, numSigs);\n            const baseFee = await getBaseFeeRecommended();\n            fee = axcCtoX(baseFee.mul(new BN(importGas)));\n        }\n\n        const unsignedTx = await cChain.buildImportTx(\n            utxoSet,\n            toAddress,\n            ownerAddresses,\n            sourceChainId,\n            fromAddresses,\n            fee\n        );\n        let tx = await this.signC(unsignedTx);\n        let id = await cChain.issueTx(tx);\n\n        await waitTxC(id);\n\n        await this.updateAxcBalanceC();\n\n        return id;\n    }\n\n    async createNftFamily(name: string, symbol: string, groupNum: number) {\n        let fromAddresses = await this.getAllAddressesX();\n        let changeAddress = this.getChangeAddressX();\n\n        let minterAddress = this.getAddressX();\n\n        let utxoSet = this.utxosX;\n\n        let unsignedTx = await buildCreateNftFamilyTx(\n            name,\n            symbol,\n            groupNum,\n            fromAddresses,\n            minterAddress,\n            changeAddress,\n            utxoSet\n        );\n\n        let signed = await this.signX(unsignedTx);\n        const txId = await xChain.issueTx(signed);\n        return await waitTxX(txId);\n    }\n\n    async mintNft(mintUtxo: AVMUTXO, payload: PayloadBase, quantity: number) {\n        let ownerAddress = this.getAddressX();\n        let changeAddress = this.getChangeAddressX();\n\n        let sourceAddresses = await this.getAllAddressesX();\n\n        let utxoSet = this.utxosX;\n        let tx = await buildMintNftTx(\n            mintUtxo,\n            payload,\n            quantity,\n            ownerAddress,\n            changeAddress,\n            sourceAddresses,\n            utxoSet\n        );\n        let signed = await this.signX(tx);\n        const txId = await xChain.issueTx(signed);\n        return await waitTxX(txId);\n    }\n\n    /**\n     * Adds a validator to the network using the given node id.\n     *\n     * @param nodeID The node id you are adding as a validator\n     * @param amt Amount of AXC to stake in nAXC\n     * @param start Validation period start date\n     * @param end Validation period end date\n     * @param delegationFee Minimum 2%\n     * @param rewardAddress P chain address to send staking rewards\n     * @param utxos\n     *\n     * @return Transaction id\n     */\n    async validate(\n        nodeID: string,\n        amt: BN,\n        start: Date,\n        end: Date,\n        delegationFee: number,\n        rewardAddress?: string,\n        utxos?: PlatformUTXO[]\n    ): Promise<string> {\n        let utxoSet = this.utxosP;\n\n        // If given custom UTXO set use that\n        if (utxos) {\n            utxoSet = new PlatformUTXOSet();\n            utxoSet.addArray(utxos);\n        }\n\n        let pAddressStrings = await this.getAllAddressesP();\n\n        let stakeAmount = amt;\n\n        // If reward address isn't given use index 0 address\n        if (!rewardAddress) {\n            rewardAddress = this.getAddressP();\n        }\n\n        // For change address use first available on the platform chain\n        let changeAddress = this.getAddressP();\n\n        let stakeReturnAddr = this.getAddressP();\n\n        // Convert dates to unix time\n        let startTime = new BN(Math.round(start.getTime() / 1000));\n        let endTime = new BN(Math.round(end.getTime() / 1000));\n\n        const unsignedTx = await pChain.buildAddValidatorTx(\n            utxoSet,\n            [stakeReturnAddr],\n            pAddressStrings, // from\n            [changeAddress], // change\n            nodeID,\n            startTime,\n            endTime,\n            stakeAmount,\n            [rewardAddress],\n            delegationFee\n        );\n\n        let tx = await this.signP(unsignedTx);\n        const txId = await pChain.issueTx(tx);\n        await waitTxP(txId);\n\n        this.updateUtxosP();\n\n        return txId;\n    }\n\n    async delegate(\n        nodeID: string,\n        amt: BN,\n        start: Date,\n        end: Date,\n        rewardAddress?: string,\n        utxos?: PlatformUTXO[]\n    ): Promise<string> {\n        let utxoSet = this.utxosP;\n        let pAddressStrings = await this.getAllAddressesP();\n\n        let stakeAmount = amt;\n\n        // If given custom UTXO set use that\n        if (utxos) {\n            utxoSet = new PlatformUTXOSet();\n            utxoSet.addArray(utxos);\n        }\n\n        // If reward address isn't given use current P address\n        if (!rewardAddress) {\n            rewardAddress = this.getAddressP();\n        }\n\n        let stakeReturnAddr = this.getAddressP();\n\n        // For change address use the current platform chain\n        let changeAddress = this.getAddressP();\n\n        // Convert dates to unix time\n        let startTime = new BN(Math.round(start.getTime() / 1000));\n        let endTime = new BN(Math.round(end.getTime() / 1000));\n\n        const unsignedTx = await pChain.buildAddDelegatorTx(\n            utxoSet,\n            [stakeReturnAddr],\n            pAddressStrings,\n            [changeAddress],\n            nodeID,\n            startTime,\n            endTime,\n            stakeAmount,\n            [rewardAddress] // reward address\n        );\n\n        const tx = await this.signP(unsignedTx);\n        const txId = await pChain.issueTx(tx);\n        await waitTxP(txId);\n\n        this.updateUtxosP();\n        return txId;\n    }\n\n    /**\n     * Issues the given transaction.\n     * @param tx A universal transaction json object.\n     */\n    public async issueUniversalTx(tx: UniversalTx): Promise<string> {\n        switch (tx.action) {\n            case 'export_x_c':\n                return await this.exportXChain(tx.amount, 'C');\n            case 'import_x_c':\n                return await this.importC('X', tx.fee);\n            case 'export_x_p':\n                return await this.exportXChain(tx.amount, 'P');\n            case 'import_x_p':\n                return await this.importP('X');\n            case 'export_c_x':\n                return await this.exportCChain(tx.amount, 'X', tx.fee);\n            case 'import_c_x':\n                return await this.importX('C');\n            case 'export_c_p':\n                return await this.exportCChain(tx.amount, 'P', tx.fee);\n            case 'import_c_p':\n                return await this.importP('C');\n            case 'export_p_x':\n                return await this.exportPChain(tx.amount, 'X');\n            case 'import_p_x':\n                return await this.importX('P');\n            case 'export_p_c':\n                return await this.exportPChain(tx.amount, 'C');\n            case 'import_p_c':\n                return await this.importC('P', tx.fee);\n            default:\n                throw new Error('Method not supported.');\n        }\n    }\n\n    async getHistoryX(limit = 0): Promise<ITransactionData[]> {\n        let addrs = await this.getAllAddressesX();\n        return await getAddressHistory(addrs, limit, xChain.getBlockchainID());\n    }\n\n    async getHistoryP(limit = 0): Promise<ITransactionData[]> {\n        let addrs = await this.getAllAddressesP();\n        return await getAddressHistory(addrs, limit, pChain.getBlockchainID());\n    }\n\n    async getHistoryC(limit = 0): Promise<ITransactionData[]> {\n        let addrs = [this.getEvmAddressBech(), ...(await this.getAllAddressesX())];\n        return await getAddressHistory(addrs, limit, cChain.getBlockchainID());\n    }\n\n    async getHistoryEVM() {\n        let addr = this.getAddressC();\n        return await getAddressHistoryEVM(addr);\n    }\n\n    async getHistory(limit: number = 0): Promise<HistoryItemType[]> {\n        let [txsX, txsP, txsC] = await Promise.all([\n            this.getHistoryX(limit),\n            this.getHistoryP(limit),\n            this.getHistoryC(limit),\n        ]);\n\n        let txsXPC = filterDuplicateTransactions(txsX.concat(txsP, txsC));\n\n        let txsEVM = await this.getHistoryEVM();\n\n        let addrsX = await this.getAllAddressesX();\n        let addrBechC = this.getEvmAddressBech();\n        let addrs = [...addrsX, addrBechC];\n\n        let addrC = this.getAddressC();\n\n        // Parse X,P,C transactions\n        // Have to loop because of the asynchronous call\n        let parsedXPC = [];\n        for (let i = 0; i < txsXPC.length; i++) {\n            let tx = txsXPC[i];\n            try {\n                let summary = await getTransactionSummary(tx, addrs, addrC);\n                parsedXPC.push(summary);\n            } catch (err) {\n                console.error(err);\n            }\n        }\n\n        // Parse EVM Transactions\n        let parsedEVM = txsEVM.map((tx) => getTransactionSummaryEVM(tx, addrC));\n\n        // Sort and join X,P,C transactions\n        let parsedAll = [...parsedXPC, ...parsedEVM];\n        let txsSorted = parsedAll.sort((x, y) => (x.timestamp.getTime() < y.timestamp.getTime() ? 1 : -1));\n\n        // If there is a limit only return that much\n        if (limit > 0) {\n            return txsSorted.slice(0, limit);\n        }\n        return txsSorted;\n    }\n\n    /**\n     * Fetches information about the given txId and parses it from the wallet's perspective\n     * @param txId\n     */\n    async getHistoryTx(txId: string): Promise<HistoryItemType> {\n        let addrs = await this.getAllAddressesX();\n        let addrC = this.getAddressC();\n\n        let rawData = await getTx(txId);\n        return await getTransactionSummary(rawData, addrs, addrC);\n    }\n\n    /**\n     * Fetches information about the given txId and parses it from the wallet's perspective\n     * @param txHash\n     */\n    async getHistoryTxEvm(txHash: string): Promise<HistoryItemType> {\n        let addrC = this.getAddressC();\n\n        let rawData = await getTxEvm(txHash);\n        return getTransactionSummaryEVM(rawData, addrC);\n    }\n}\n","// HD WALLET\n// Accounts are not used and the account index is fixed to 0\n// m / purpose' / coin_type' / account' / change / address_index\n\nexport const AXC_TOKEN_INDEX: string = '9000';\nexport const AXC_TOKEN_PATH = `m/44'/${AXC_TOKEN_INDEX}'`;\nexport const AXC_ACCOUNT_PATH: string = `m/44'/${AXC_TOKEN_INDEX}'/0'`; // Change and index left out\nexport const ETH_ACCOUNT_PATH: string = `m/44'/60'/0'`;\nexport const LEDGER_ETH_ACCOUNT_PATH = ETH_ACCOUNT_PATH + '/0/0';\n\nexport const HD_SCAN_GAP_SIZE: number = 20; // a gap of at least 20 indexes is needed to claim an index unused\nexport const SCAN_SIZE: number = 70; // the total number of utxos to look at initially to calculate last index\nexport const HD_SCAN_LOOK_UP_WINDOW: number = 64; // Number of addresses to check with the explorer at a single call\nexport const SCAN_RANGE: number = SCAN_SIZE - HD_SCAN_GAP_SIZE; // How many items are actually scanned\n\nexport const LEDGER_EXCHANGE_TIMEOUT = 90_000;\nexport const MIN_EVM_SUPPORT_V = '0.5.3';\n/**\n * In order to free the thread when deriving addresses, the execution will sleep every N address derived\n */\nexport const DERIVATION_SLEEP_INTERVAL = 200;\n","import { explorer_api } from '@/Network/network';\nimport { NO_EXPLORER_API } from '@/errors';\n\nexport async function isAddressUsedX(addr: string) {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let addrRaw = addr.split('-')[1];\n    let url = `/x/transactions?address=${addrRaw}&limit=1&disableCount=1`;\n\n    let res = await explorer_api.get(url);\n    if (res.data.transactions.length > 0) return true;\n    else return false;\n}\n\nexport async function getAddressDetailX(addr: string) {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let addrRaw = addr.split('-')[1];\n    let url = `/x/addresses/${addrRaw}`;\n\n    let res = await explorer_api.get(url);\n    return res.data;\n}\n\n// Given an array of addresses, checks which chain each address was already used on\nexport async function getAddressChains(addrs: string[]) {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    // Strip the prefix\n    let rawAddrs = addrs.map((addr) => {\n        return addr.split('-')[1];\n    });\n\n    let urlRoot = `/v2/addressChains`;\n\n    let res = await explorer_api.post(urlRoot, {\n        address: rawAddrs,\n        disableCount: ['1'],\n    });\n\n    return res.data.addressChains;\n}\n","import * as bip32 from 'bip32';\nimport { getPreferredHRP } from '@zee-ava/avajs/dist/utils';\nimport { activeNetwork, axia, pChain, xChain } from '@/Network/network';\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from '@zee-ava/avajs/dist/apis/avm/keychain';\nimport { KeyChain as PlatformKeyChain, KeyPair as PlatformKeyPair } from '@zee-ava/avajs/dist/apis/platformvm';\nimport { HdChainType } from './types';\nimport { Buffer } from '@zee-ava/avajs';\nimport {\n    DERIVATION_SLEEP_INTERVAL,\n    HD_SCAN_GAP_SIZE,\n    HD_SCAN_LOOK_UP_WINDOW,\n    SCAN_RANGE,\n    SCAN_SIZE,\n} from './constants';\nimport { getAddressChains } from '@/Explorer';\nimport { NO_NETWORK } from '@/errors';\nimport { bintools } from '@/common';\nimport { sleep } from '@/utils';\n\ntype AddressCache = {\n    [index: string]: bip32.BIP32Interface;\n};\n\ntype KeyCacheX = {\n    [index: string]: AVMKeyPair;\n};\n\ntype KeyCacheP = {\n    [index: string]: PlatformKeyPair;\n};\n\n// Each HD wallet has 2 HdScaners, one for internal chain, one for external\nexport default class HdScanner {\n    protected index = 0;\n    protected addressCache: AddressCache = {};\n    protected keyCacheX: KeyCacheX = {};\n    protected keyCacheP: KeyCacheP = {};\n    readonly changePath: string;\n    private avmAddrFactory: AVMKeyPair;\n    readonly accountKey: bip32.BIP32Interface;\n\n    constructor(accountKey: bip32.BIP32Interface, isInternal = true) {\n        this.changePath = isInternal ? '1' : '0';\n        this.accountKey = accountKey;\n        // We need an instance of an AVM key to generate adddresses from public keys\n        let hrp = getPreferredHRP(axia.getNetworkID());\n        this.avmAddrFactory = new AVMKeyPair(hrp, 'X');\n    }\n\n    getIndex() {\n        return this.index;\n    }\n\n    setIndex(index: number) {\n        let round = Math.floor(index);\n        if (round < 0) throw new Error('A derivation index can not be less than 0.');\n        this.index = round;\n    }\n\n    public increment(): number {\n        return this.index++;\n    }\n\n    public getAddressX() {\n        return this.getAddressForIndex(this.index, 'X');\n    }\n\n    public getAddressP() {\n        return this.getAddressForIndex(this.index, 'P');\n    }\n\n    /**\n     * Returns every address up to and including the current index.\n     * @param chainId Either X or P\n     */\n    public async getAllAddresses(chainId: HdChainType = 'X'): Promise<string[]> {\n        let upTo = this.index;\n        return await this.getAddressesInRange(0, upTo + 1, chainId);\n    }\n\n    /**\n     * Returns every address up to and including the current index synchronously.\n     * @param chainId Either X or P\n     */\n    public getAllAddressesSync(chainId: HdChainType = 'X'): string[] {\n        let upTo = this.index;\n        return this.getAddressesInRangeSync(0, upTo + 1, chainId);\n    }\n\n    /**\n     * Returns addresses in the given range\n     * @param start Start index\n     * @param end End index, exclusive\n     * @param chainId  `X` or `P` optional, returns X by default\n     */\n    public async getAddressesInRange(start: number, end: number, chainId: HdChainType = 'X'): Promise<string[]> {\n        let res = [];\n        for (let i = start; i < end; i++) {\n            res.push(this.getAddressForIndex(i, chainId));\n\n            // Sleep every Nth address to open up the thread\n            if ((i - start) % DERIVATION_SLEEP_INTERVAL === 0) {\n                await sleep(0);\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns addresses in the given range\n     * @param start Start index\n     * @param end End index, exclusive\n     * @param chainId  `X` or `P` optional, returns X by default\n     */\n    public getAddressesInRangeSync(start: number, end: number, chainId: HdChainType = 'X'): string[] {\n        let res = [];\n        for (let i = start; i < end; i++) {\n            res.push(this.getAddressForIndex(i, chainId));\n        }\n        return res;\n    }\n\n    getKeyChainX(): AVMKeyChain {\n        let keychain = xChain.newKeyChain();\n        for (let i = 0; i <= this.index; i++) {\n            let key = this.getKeyForIndexX(i);\n            keychain.addKey(key);\n        }\n        return keychain;\n    }\n\n    getKeyChainP(): PlatformKeyChain {\n        let keychain = pChain.newKeyChain();\n        for (let i = 0; i <= this.index; i++) {\n            let key = this.getKeyForIndexP(i);\n            keychain.addKey(key);\n        }\n        return keychain;\n    }\n\n    getKeyForIndexX(index: number): AVMKeyPair {\n        let cache = this.keyCacheX[index];\n        if (cache) return cache;\n\n        let hdKey = this.getHdKeyForIndex(index);\n        let pkHex = hdKey.privateKey!.toString('hex');\n\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\n\n        let keychain = xChain.newKeyChain();\n        let keypair = keychain.importKey(pkBuf);\n\n        this.keyCacheX[index] = keypair;\n        return keypair;\n    }\n\n    getKeyForIndexP(index: number): PlatformKeyPair {\n        let cache = this.keyCacheP[index];\n        if (cache) return cache;\n\n        let hdKey = this.getHdKeyForIndex(index);\n        let pkHex = hdKey.privateKey!.toString('hex');\n\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\n\n        let keychain = pChain.newKeyChain();\n        let keypair = keychain.importKey(pkBuf);\n\n        this.keyCacheP[index] = keypair;\n\n        return keypair;\n    }\n\n    private getHdKeyForIndex(index: number): bip32.BIP32Interface {\n        let key: bip32.BIP32Interface;\n        if (this.addressCache[index]) {\n            key = this.addressCache[index];\n        } else {\n            key = this.accountKey.derivePath(`${this.changePath}/${index}`);\n            this.addressCache[index] = key;\n        }\n        return key;\n    }\n\n    public getAddressForIndex(index: number, chainId: HdChainType = 'X'): string {\n        let key = this.getHdKeyForIndex(index);\n\n        let publicKey = key.publicKey.toString('hex');\n        let publicKeyBuff = Buffer.from(publicKey, 'hex');\n\n        let hrp = getPreferredHRP(axia.getNetworkID());\n        //@ts-ignore\n        let addrBuf = this.avmAddrFactory.addressFromPublicKey(publicKeyBuff);\n        let addr = bintools.addressToString(hrp, chainId, addrBuf);\n\n        return addr;\n    }\n\n    // Uses the explorer to scan used addresses and find its starting index\n    public async resetIndex(startIndex = 0): Promise<number> {\n        if (!activeNetwork) throw NO_NETWORK;\n\n        let index;\n        if (activeNetwork.explorerURL) {\n            index = await this.findAvailableIndexExplorer(startIndex);\n        } else {\n            index = await this.findAvailableIndexNode(startIndex);\n        }\n        this.index = index;\n        return index;\n    }\n\n    // Scans the address space of this hd path and finds the last used index using the\n    // explorer API.\n    private async findAvailableIndexExplorer(startIndex = 0): Promise<number> {\n        let addrs = await this.getAddressesInRange(startIndex, startIndex + HD_SCAN_LOOK_UP_WINDOW);\n        let addrChains = await getAddressChains(addrs);\n\n        for (let i = 0; i < addrs.length - HD_SCAN_GAP_SIZE; i++) {\n            let gapSize: number = 0;\n\n            for (let n = 0; n < HD_SCAN_GAP_SIZE; n++) {\n                let scanIndex = i + n;\n                let scanAddr = addrs[scanIndex];\n\n                let rawAddr = scanAddr.split('-')[1];\n                let chains: string[] = addrChains[rawAddr];\n\n                if (!chains) {\n                    // If doesnt exist on any chain\n                    gapSize++;\n                } else {\n                    i = i + n;\n                    break;\n                }\n            }\n\n            // If the gap is reached return the index\n            if (gapSize === HD_SCAN_GAP_SIZE) {\n                return startIndex + i;\n            }\n        }\n\n        return await this.findAvailableIndexExplorer(startIndex + (HD_SCAN_LOOK_UP_WINDOW - HD_SCAN_GAP_SIZE));\n    }\n\n    // Uses the node to find last used HD index\n    // Only used when there is no explorer API available\n    private async findAvailableIndexNode(start = 0): Promise<number> {\n        let addrsX: string[] = [];\n        let addrsP: string[] = [];\n\n        // Get keys for indexes start to start+scan_size\n        for (let i: number = start; i < start + SCAN_SIZE; i++) {\n            let addressX = this.getAddressForIndex(i, 'X');\n            let addressP = this.getAddressForIndex(i, 'P');\n            addrsX.push(addressX);\n            addrsP.push(addressP);\n        }\n\n        let utxoSetX = (await xChain.getUTXOs(addrsX)).utxos;\n        let utxoSetP = (await pChain.getUTXOs(addrsP)).utxos;\n\n        // Scan UTXOs of these indexes and try to find a gap of HD_SCAN_GAP_SIZE\n        for (let i: number = 0; i < addrsX.length - HD_SCAN_GAP_SIZE; i++) {\n            let gapSize: number = 0;\n            for (let n: number = 0; n < HD_SCAN_GAP_SIZE; n++) {\n                let scanIndex: number = i + n;\n                let addr: string = addrsX[scanIndex];\n                let addrBuf = bintools.parseAddress(addr, 'X');\n                let addrUTXOsX: string[] = utxoSetX.getUTXOIDs([addrBuf]);\n                let addrUTXOsP: string[] = utxoSetP.getUTXOIDs([addrBuf]);\n                if (addrUTXOsX.length === 0 && addrUTXOsP.length === 0) {\n                    gapSize++;\n                } else {\n                    // Potential improvement\n                    i = i + n;\n                    break;\n                }\n            }\n\n            // If we found a gap of 20, we can return the last fullIndex+1\n            if (gapSize === HD_SCAN_GAP_SIZE) {\n                let targetIndex = start + i;\n                return targetIndex;\n            }\n        }\n        return await this.findAvailableIndexNode(start + SCAN_RANGE);\n    }\n}\n","import { WalletProvider } from '@/Wallet/Wallet';\nimport HdScanner from '@/Wallet/HdScanner';\nimport { UTXOSet as AVMUTXOSet } from '@zee-ava/avajs/dist/apis/avm/utxos';\nimport { axia } from '@/Network/network';\nimport { UTXOSet as PlatformUTXOSet } from '@zee-ava/avajs/dist/apis/platformvm';\nimport { iHDWalletIndex } from '@/Wallet/types';\nimport { bintools } from '@/common';\nimport * as bip32 from 'bip32';\nimport { NetworkConfig } from '@/Network';\n\nexport abstract class HDWalletAbstract extends WalletProvider {\n    protected internalScan: HdScanner;\n    protected externalScan: HdScanner;\n    protected accountKey: bip32.BIP32Interface;\n    public isHdReady = false;\n\n    protected constructor(accountKey: bip32.BIP32Interface) {\n        super();\n\n        this.internalScan = new HdScanner(accountKey, true);\n        this.externalScan = new HdScanner(accountKey, false);\n        this.accountKey = accountKey;\n    }\n\n    protected onNetworkChange(config: NetworkConfig) {\n        super.onNetworkChange(config);\n\n        this.isHdReady = false;\n    }\n\n    /**\n     * Returns current index used for external address derivation.\n     */\n    public getExternalIndex(): number {\n        return this.externalScan.getIndex();\n    }\n\n    /**\n     * Returns current index used for internal address derivation.\n     */\n    public getInternalIndex(): number {\n        return this.internalScan.getIndex();\n    }\n\n    /**\n     * Gets the active external address on the X chain\n     * - The X address will change after every deposit.\n     */\n    public getAddressX(): string {\n        return this.externalScan.getAddressX();\n    }\n\n    /**\n     * Gets the active change address on the X chain\n     * - The change address will change after every transaction on the X chain.\n     */\n    public getChangeAddressX() {\n        return this.internalScan.getAddressX();\n    }\n\n    /**\n     * Gets the active address on the P chain\n     */\n    public getAddressP(): string {\n        return this.externalScan.getAddressP();\n    }\n\n    /**\n     * Returns every external X chain address used by the wallet up to now.\n     */\n    public async getExternalAddressesX(): Promise<string[]> {\n        return await this.externalScan.getAllAddresses('X');\n    }\n\n    /**\n     * Returns every external X chain address used by the wallet up to now.\n     */\n    public getExternalAddressesXSync(): string[] {\n        return this.externalScan.getAllAddressesSync('X');\n    }\n\n    /**\n     * Returns every internal X chain address used by the wallet up to now.\n     */\n    public async getInternalAddressesX(): Promise<string[]> {\n        return await this.internalScan.getAllAddresses('X');\n    }\n\n    /**\n     * Returns every internal X chain address used by the wallet up to now.\n     */\n    public getInternalAddressesXSync(): string[] {\n        return this.internalScan.getAllAddressesSync('X');\n    }\n\n    /**\n     * Returns every X chain address used by the wallet up to now (internal + external).\n     */\n    public async getAllAddressesX(): Promise<string[]> {\n        return [...(await this.getExternalAddressesX()), ...(await this.getInternalAddressesX())];\n    }\n\n    /**\n     * Returns every X chain address used by the wallet up to now (internal + external).\n     */\n    public getAllAddressesXSync(): string[] {\n        return [...this.getExternalAddressesXSync(), ...this.getInternalAddressesXSync()];\n    }\n\n    public async getExternalAddressesP(): Promise<string[]> {\n        return this.externalScan.getAllAddresses('P');\n    }\n\n    public getExternalAddressesPSync(): string[] {\n        return this.externalScan.getAllAddressesSync('P');\n    }\n\n    /**\n     * Returns every P chain address used by the wallet up to now.\n     */\n    public getAllAddressesP(): Promise<string[]> {\n        return this.getExternalAddressesP();\n    }\n\n    /**\n     * Returns every P chain address used by the wallet up to now.\n     */\n    public getAllAddressesPSync(): string[] {\n        return this.getExternalAddressesPSync();\n    }\n\n    /**\n     * Scans the network and initializes internal and external addresses on P and X chains.\n     * - Heavy operation\n     * - MUST use the explorer api to find the last used address\n     * - If explorer is not available it will use the connected node. This may result in invalid balances.\n     */\n    public async resetHdIndices(externalStart = 0, internalStart = 0): Promise<iHDWalletIndex> {\n        let promiseExt = this.externalScan.resetIndex(externalStart);\n        let promiseInt = this.internalScan.resetIndex(internalStart);\n\n        const [indexExt, indexInt] = await Promise.all([promiseExt, promiseInt]);\n\n        this.emitAddressChange();\n        this.isHdReady = true;\n        this.emitHdReady();\n\n        return {\n            internal: indexInt,\n            external: indexExt,\n        };\n    }\n\n    public setHdIndices(external: number, internal: number) {\n        this.externalScan.setIndex(external);\n        this.internalScan.setIndex(internal);\n\n        this.emitAddressChange();\n        this.isHdReady = true;\n        this.emitHdReady();\n    }\n\n    /**\n     * Emits an event to indicate the wallet has finishing calculating its last use address\n     * @protected\n     */\n    protected emitHdReady(): void {\n        this.emit('hd_ready', {\n            external: this.getExternalIndex(),\n            internal: this.getInternalIndex(),\n        });\n    }\n\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\n        let utxosX = await super.updateUtxosX();\n\n        // If the current internal or external X address is in the utxo set, increment hd index\n        let utxoAddrs = utxosX.getAddresses();\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\n            return bintools.addressToString(axia.getHRP(), 'X', addr);\n        });\n\n        let addrExternalX = this.getAddressX();\n        let addrInternalX = this.getChangeAddressX();\n\n        let isAddrChange = false;\n        // Increment external index if the current address is in the utxo set\n        if (utxoAddrsStr.includes(addrExternalX)) {\n            this.incrementExternal();\n            isAddrChange = true;\n        }\n\n        // Increment internal index if the current address is in the utxo set\n        if (utxoAddrsStr.includes(addrInternalX)) {\n            this.incrementInternal();\n            isAddrChange = true;\n        }\n\n        if (isAddrChange) this.emitAddressChange();\n\n        return utxosX;\n    }\n\n    private incrementExternal() {\n        this.externalScan.increment();\n    }\n\n    private incrementInternal() {\n        this.internalScan.increment();\n    }\n\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\n        let utxosP = await super.updateUtxosP();\n\n        // If the current P address is in the utxo set, increment hd index\n        let utxoAddrs = utxosP.getAddresses();\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\n            return bintools.addressToString(axia.getHRP(), 'P', addr);\n        });\n\n        let addrExternalP = this.getAddressP();\n\n        // Increment external index if the current address is in the utxo set\n        if (utxoAddrsStr.includes(addrExternalP)) {\n            this.incrementExternal();\n            this.emitAddressChange();\n        }\n\n        return utxosP;\n    }\n\n    public getAddressAtIndexExternalX(index: number): string {\n        if (index < 0) throw new Error('Index must be >= 0');\n        return this.externalScan.getKeyForIndexX(index).getAddressString();\n    }\n\n    public getAddressAtIndexInternalX(index: number): string {\n        if (index < 0) throw new Error('Index must be >= 0');\n        return this.internalScan.getKeyForIndexX(index).getAddressString();\n    }\n\n    public getAddressAtIndexExternalP(index: number): string {\n        if (index < 0) throw new Error('Index must be >= 0');\n        return this.externalScan.getKeyForIndexP(index).getAddressString();\n    }\n}\n","import { AXC_TOKEN_PATH, ETH_ACCOUNT_PATH } from '@/Wallet/constants';\n\n/**\n * Given an account number, returns the Axia account derivation path as a string\n * @param accountIndex\n */\nexport function getAccountPathAxia(accountIndex: number) {\n    if (accountIndex < 0) throw new Error('Account index can not be less than 0.');\n    return `${AXC_TOKEN_PATH}/${accountIndex}'`;\n}\n\nexport function getAccountPathEVM(accountIndex: number) {\n    if (accountIndex < 0) throw new Error('Account index can not be less than 0.');\n    return `${ETH_ACCOUNT_PATH}/0/${accountIndex}`;\n}\n","import * as bip39 from 'bip39';\nimport * as bip32 from 'bip32';\nimport EvmWallet from './EvmWallet';\nimport { UnsafeWallet, WalletNameType } from './types';\nimport { Buffer } from '@zee-ava/avajs';\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\nimport { Tx as AVMTx, UnsignedTx as AVMUnsignedTx } from '@zee-ava/avajs/dist/apis/avm';\nimport { Tx as PlatformTx, UnsignedTx as PlatformUnsignedTx } from '@zee-ava/avajs/dist/apis/platformvm';\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from '@zee-ava/avajs/dist/apis/avm/keychain';\nimport { KeyChain as PlatformKeyChain } from '@zee-ava/avajs/dist/apis/platformvm';\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx, KeyPair as EVMKeyPair } from '@zee-ava/avajs/dist/apis/evm';\nimport { axia } from '@/Network/network';\nimport { digestMessage } from '@/utils';\nimport { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\nimport { bintools } from '@/common';\nimport { getAccountPathAxia, getAccountPathEVM } from '@/Wallet/helpers/derivationHelper';\n\nexport default class MnemonicWallet extends HDWalletAbstract implements UnsafeWallet {\n    evmWallet: EvmWallet;\n    type: WalletNameType;\n    mnemonic: string;\n    accountIndex: number;\n\n    private ethAccountKey: bip32.BIP32Interface;\n\n    constructor(mnemonic: string, account = 0) {\n        let seed: globalThis.Buffer = bip39.mnemonicToSeedSync(mnemonic);\n\n        let masterHdKey = bip32.fromSeed(seed);\n        let accountKey = masterHdKey.derivePath(getAccountPathAxia(account));\n\n        super(accountKey);\n\n        this.type = 'mnemonic';\n        if (!bip39.validateMnemonic(mnemonic)) {\n            throw new Error('Invalid mnemonic phrase.');\n        }\n\n        let ethAccountKey = masterHdKey.derivePath(getAccountPathEVM(account));\n        this.ethAccountKey = ethAccountKey;\n        let ethKey = ethAccountKey.privateKey;\n        let evmWallet = new EvmWallet(ethKey!);\n\n        this.accountIndex = account;\n        this.mnemonic = mnemonic;\n        this.evmWallet = evmWallet;\n    }\n\n    /**\n     * Gets the active address on the C chain in Bech32 encoding\n     * @return\n     * Bech32 representation of the EVM address.\n     */\n    public getEvmAddressBech(): string {\n        let keypair = new EVMKeyPair(axia.getHRP(), 'C');\n        //@ts-ignore\n        let addr = keypair.addressFromPublicKey(Buffer.from(this.ethAccountKey.publicKey));\n        return bintools.addressToString(axia.getHRP(), 'C', addr);\n    }\n\n    /**\n     * Returns the derived private key used by the EVM wallet.\n     */\n    public getEvmPrivateKeyHex(): string {\n        return this.evmWallet.getPrivateKeyHex();\n    }\n\n    /**\n     * Generates a 24 word mnemonic phrase and initializes a wallet instance with it.\n     * @return Returns the initialized wallet.\n     */\n    static create(): MnemonicWallet {\n        const mnemonic = bip39.generateMnemonic(256);\n        return MnemonicWallet.fromMnemonic(mnemonic);\n    }\n\n    /**\n     * Returns a new 24 word mnemonic key phrase.\n     */\n    static generateMnemonicPhrase(): string {\n        return bip39.generateMnemonic(256);\n    }\n\n    /**\n     * Returns a new instance of a Mnemonic wallet from the given key phrase.\n     * @param mnemonic The 24 word mnemonic phrase of the wallet\n     */\n    static fromMnemonic(mnemonic: string): MnemonicWallet {\n        return new MnemonicWallet(mnemonic);\n    }\n\n    /**\n     * Signs an EVM transaction on the C chain.\n     * @param tx The unsigned transaction\n     */\n    async signEvm(tx: Transaction | FeeMarketEIP1559Transaction): Promise<Transaction | FeeMarketEIP1559Transaction> {\n        return this.evmWallet.signEVM(tx);\n    }\n\n    /**\n     * Signs an AVM transaction.\n     * @param tx The unsigned transaction\n     */\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\n        return tx.sign(this.getKeyChainX());\n    }\n\n    /**\n     * Signs a PlatformVM transaction.\n     * @param tx The unsigned transaction\n     */\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\n        return tx.sign(this.getKeyChainP());\n    }\n\n    /**\n     * Signs a C chain transaction\n     * @remarks\n     * Used for Import and Export transactions on the C chain. For everything else, use `this.signEvm()`\n     * @param tx The unsigned transaction\n     */\n    async signC(tx: EVMUnsignedTx): Promise<EVMTx> {\n        return this.evmWallet.signC(tx);\n    }\n\n    /**\n     * Returns a keychain with the keys of every derived X chain address.\n     * @private\n     */\n    private getKeyChainX(): AVMKeyChain {\n        let internal = this.internalScan.getKeyChainX();\n        let external = this.externalScan.getKeyChainX();\n        return internal.union(external);\n    }\n\n    /**\n     * Returns a keychain with the keys of every derived P chain address.\n     * @private\n     */\n    private getKeyChainP(): PlatformKeyChain {\n        return this.externalScan.getKeyChainP();\n    }\n\n    /**\n     * Gets the active address on the C chain\n     * @return\n     * Hex representation of the EVM address.\n     */\n    public getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    // TODO: Support internal address as well\n    signMessage(msgStr: string, index: number): string {\n        let key = this.externalScan.getKeyForIndexX(index) as AVMKeyPair;\n        let digest = digestMessage(msgStr);\n\n        // Convert to the other Buffer and sign\n        let digestHex = digest.toString('hex');\n        let digestBuff = Buffer.from(digestHex, 'hex');\n        let signed = key.sign(digestBuff);\n\n        return bintools.cb58Encode(signed);\n    }\n}\n","import { WalletProvider } from '@/Wallet/Wallet';\nimport { UnsafeWallet, WalletNameType } from '@/Wallet/types';\n\nimport { KeyChain as AVMKeyChain, UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from '@zee-ava/avajs/dist/apis/avm';\nimport {\n    KeyChain as PlatformKeyChain,\n    UnsignedTx as PlatformUnsignedTx,\n    Tx as PlatformTx,\n} from '@zee-ava/avajs/dist/apis/platformvm';\nimport { axia, pChain, xChain } from '@/Network/network';\nimport { Buffer as BufferAxia } from '@zee-ava/avajs';\nimport EvmWallet from '@/Wallet/EvmWallet';\nimport { UnsignedTx, Tx, KeyPair as EVMKeyPair } from '@zee-ava/avajs/dist/apis/evm';\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx';\nimport { bintools } from '@/common';\n\nexport default class SingletonWallet extends WalletProvider implements UnsafeWallet {\n    type: WalletNameType = 'singleton';\n    key = '';\n    keyBuff: BufferAxia;\n    evmWallet: EvmWallet;\n\n    /**\n     *\n     * @param privateKey An axia private key, starts with `PrivateKey-`\n     */\n    constructor(privateKey: string) {\n        super();\n\n        this.key = privateKey;\n\n        // Derive EVM key and address\n        let pkBuf = bintools.cb58Decode(privateKey.split('-')[1]);\n        this.keyBuff = pkBuf;\n\n        let pkHex = pkBuf.toString('hex');\n        let pkBuffNative = Buffer.from(pkHex, 'hex');\n\n        this.evmWallet = new EvmWallet(pkBuffNative);\n    }\n\n    static fromPrivateKey(key: string): SingletonWallet {\n        return new SingletonWallet(key);\n    }\n\n    static fromEvmKey(key: string): SingletonWallet {\n        let keyBuff = bintools.cb58Encode(BufferAxia.from(key, 'hex'));\n        let avmKeyStr = `PrivateKey-${keyBuff}`;\n        return new SingletonWallet(avmKeyStr);\n    }\n\n    private getKeyChainX(): AVMKeyChain {\n        let keyChain = xChain.newKeyChain();\n        keyChain.importKey(this.key);\n        return keyChain;\n    }\n\n    private getKeyChainP(): PlatformKeyChain {\n        let keyChain = pChain.newKeyChain();\n        keyChain.importKey(this.key);\n        return keyChain;\n    }\n\n    /**\n     * Returns the derived private key used by the EVM wallet.\n     */\n    public getEvmPrivateKeyHex(): string {\n        return this.evmWallet.getPrivateKeyHex();\n    }\n\n    getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    getAddressP(): string {\n        let keyChain = this.getKeyChainP();\n        return keyChain.getAddressStrings()[0];\n    }\n\n    getAddressX(): string {\n        let keyChain = this.getKeyChainX();\n        return keyChain.getAddressStrings()[0];\n    }\n\n    async getAllAddressesP(): Promise<string[]> {\n        return [this.getAddressP()];\n    }\n\n    getAllAddressesPSync(): string[] {\n        return [this.getAddressP()];\n    }\n\n    async getAllAddressesX(): Promise<string[]> {\n        return [this.getAddressX()];\n    }\n\n    getAllAddressesXSync(): string[] {\n        return [this.getAddressX()];\n    }\n\n    getChangeAddressX(): string {\n        return this.getAddressX();\n    }\n\n    getEvmAddressBech(): string {\n        let keypair = new EVMKeyPair(axia.getHRP(), 'C');\n        keypair.importKey(this.keyBuff);\n        return keypair.getAddressString();\n    }\n\n    async getExternalAddressesP(): Promise<string[]> {\n        return [this.getAddressP()];\n    }\n\n    getExternalAddressesPSync(): string[] {\n        return [this.getAddressP()];\n    }\n\n    async getExternalAddressesX(): Promise<string[]> {\n        return [this.getAddressX()];\n    }\n\n    getExternalAddressesXSync(): string[] {\n        return [this.getAddressX()];\n    }\n\n    async getInternalAddressesX(): Promise<string[]> {\n        return [this.getAddressX()];\n    }\n\n    getInternalAddressesXSync(): string[] {\n        return [this.getAddressX()];\n    }\n\n    async signC(tx: UnsignedTx): Promise<Tx> {\n        return this.evmWallet.signC(tx);\n    }\n\n    async signEvm(tx: Transaction | FeeMarketEIP1559Transaction): Promise<Transaction | FeeMarketEIP1559Transaction> {\n        return this.evmWallet.signEVM(tx);\n    }\n\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\n        return tx.sign(this.getKeyChainP());\n    }\n\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\n        return tx.sign(this.getKeyChainX());\n    }\n}\n","/*\n * Bitcoin BIP32 path helpers\n * (C) 2016 Alex Beregszaszi\n */\n\nconst HARDENED = 0x80000000\n\nvar BIPPath = function (path) {\n  if (!Array.isArray(path)) {\n    throw new Error('Input must be an Array')\n  }\n  if (path.length === 0) {\n    throw new Error('Path must contain at least one level')\n  }\n  for (var i = 0; i < path.length; i++) {\n    if (typeof path[i] !== 'number') {\n      throw new Error('Path element is not a number')\n    }\n  }\n  this.path = path\n}\n\nBIPPath.validatePathArray = function (path) {\n  try {\n    BIPPath.fromPathArray(path)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.validateString = function (text, reqRoot) {\n  try {\n    BIPPath.fromString(text, reqRoot)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.fromPathArray = function (path) {\n  return new BIPPath(path)\n}\n\nBIPPath.fromString = function (text, reqRoot) {\n  // skip the root\n  if (/^m\\//i.test(text)) {\n    text = text.slice(2)\n  } else if (reqRoot) {\n    throw new Error('Root element is required')\n  }\n\n  var path = text.split('/')\n  var ret = new Array(path.length)\n  for (var i = 0; i < path.length; i++) {\n    var tmp = /(\\d+)([hH\\']?)/.exec(path[i])\n    if (tmp === null) {\n      throw new Error('Invalid input')\n    }\n    ret[i] = parseInt(tmp[1], 10)\n\n    if (ret[i] >= HARDENED) {\n      throw new Error('Invalid child index')\n    }\n\n    if (tmp[2] === 'h' || tmp[2] === 'H' || tmp[2] === '\\'') {\n      ret[i] += HARDENED\n    } else if (tmp[2].length != 0) {\n      throw new Error('Invalid modifier')\n    }\n  }\n  return new BIPPath(ret)\n}\n\nBIPPath.prototype.toPathArray = function () {\n  return this.path\n}\n\nBIPPath.prototype.toString = function (noRoot, oldStyle) {\n  var ret = new Array(this.path.length)\n  for (var i = 0; i < this.path.length; i++) {\n    var tmp = this.path[i]\n    if (tmp & HARDENED) {\n      ret[i] = (tmp & ~HARDENED) + (oldStyle ? 'h' : '\\'')\n    } else {\n      ret[i] = tmp\n    }\n  }\n  return (noRoot ? '' : 'm/') + ret.join('/')\n}\n\nBIPPath.prototype.inspect = function () {\n  return 'BIPPath <' + this.toString() + '>'\n}\n\nmodule.exports = BIPPath\n","//@ts-ignore\nimport Eth from '@ledgerhq/hw-app-eth';\n// @ts-ignore\nimport AppAxc from '@zee-ava/hd-wallet-axia';\nimport EthereumjsCommon from '@ethereumjs/common';\nimport { importPublic, bnToRlp, rlp, BN as EthBN } from 'ethereumjs-util';\nimport {\n    AXC_ACCOUNT_PATH,\n    ETH_ACCOUNT_PATH,\n    LEDGER_ETH_ACCOUNT_PATH,\n    LEDGER_EXCHANGE_TIMEOUT,\n    MIN_EVM_SUPPORT_V,\n} from '@/Wallet/constants';\nimport HDKey from 'hdkey';\nimport { ChainAlias, ILedgerAppConfig, WalletNameType } from '@/Wallet/types';\nimport { Transaction, TxOptions } from '@ethereumjs/tx';\nimport {\n    UnsignedTx as AVMUnsignedTx,\n    Tx as AVMTx,\n    TransferableOperation,\n    OperationTx,\n    AVMConstants,\n    ImportTx as AVMImportTx,\n    SelectCredentialClass as AVMSelectCredentialClass,\n} from '@zee-ava/avajs/dist/apis/avm';\nimport { Credential, SigIdx, Signature } from '@zee-ava/avajs/dist/common';\nimport {\n    UnsignedTx as EVMUnsignedTx,\n    Tx as EVMTx,\n    ImportTx as EVMImportTx,\n    ExportTx as EVMExportTx,\n    EVMInput,\n    SelectCredentialClass as EVMSelectCredentialClass,\n    EVMConstants,\n} from '@zee-ava/avajs/dist/apis/evm';\nimport {\n    UnsignedTx as PlatformUnsignedTx,\n    Tx as PlatformTx,\n    PlatformVMConstants,\n    ExportTx as PlatformExportTx,\n    ImportTx as PlatformImportTx,\n    SelectCredentialClass as PlatformSelectCredentialClass,\n} from '@zee-ava/avajs/dist/apis/platformvm';\nimport { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport { KeyPair as EVMKeyPair } from '@zee-ava/avajs/dist/apis/evm/keychain';\nimport { activeNetwork, axia, web3 } from '@/Network/network';\nimport { Buffer } from '@zee-ava/avajs';\nimport { ChainIdType } from '@/types';\nimport { ParseableAvmTxEnum, ParseablePlatformEnum, ParseableEvmTxEnum } from '@/helpers/tx_helper';\nimport createHash from 'create-hash';\n//@ts-ignore\nimport bippath from 'bip32-path';\nimport { bintools } from '@/common';\nimport * as bip32 from 'bip32';\nimport { idToChainAlias } from '@/Network';\nimport { getAccountPathAxia } from '@/Wallet/helpers/derivationHelper';\n\nexport default class LedgerWallet extends HDWalletAbstract {\n    evmWallet: EvmWalletReadonly;\n    type: WalletNameType = 'ledger';\n    evmAccount: HDKey;\n    config: ILedgerAppConfig;\n\n    appAxc: AppAxc;\n    ethApp: Eth;\n\n    constructor(\n        axcAcct: bip32.BIP32Interface,\n        evmAcct: HDKey,\n        axcApp: AppAxc,\n        ethApp: Eth,\n        config: ILedgerAppConfig\n    ) {\n        super(axcAcct);\n        this.evmAccount = evmAcct;\n        this.config = config;\n        this.appAxc = axcApp;\n        this.ethApp = ethApp;\n\n        this.evmWallet = new EvmWalletReadonly(importPublic(evmAcct.publicKey));\n    }\n\n    /**\n     * Create a new ledger wallet instance from the given transport\n     * @param transport\n     */\n    static async fromTransport(transport: any) {\n        transport.setExchangeTimeout(LEDGER_EXCHANGE_TIMEOUT);\n\n        const app = LedgerWallet.getAppAxc(transport);\n        const eth = LedgerWallet.getAppEth(transport);\n\n        let config = await app.getAppConfiguration();\n\n        if (!config) {\n            throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\n        }\n\n        if (config.version < MIN_EVM_SUPPORT_V) {\n            throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\n        }\n\n        return await LedgerWallet.fromApp(app, eth);\n    }\n\n    /**\n     * Returns a bip32 HD Node that can be used to derive internal/external Axia addresses\n     * @param app Axia hw app instance\n     * @param accountIndex Index of the account.\n     * @return BIP32Interface The returned HD Node is of path `m/44'/9000'/n'` where `n` is the account index.\n     */\n    static async getAxcAccount(app: AppAxc, accountIndex = 0): Promise<bip32.BIP32Interface> {\n        if (accountIndex < 0) throw new Error('Account index must be >= 0');\n\n        let res = await app.getWalletExtendedPublicKey(getAccountPathAxia(accountIndex));\n\n        let pubKey = res.public_key;\n        let chainCode = res.chain_code;\n\n        // Get the base58 publick key from the HDKey instance\n        let hdKey = new HDKey();\n        // @ts-ignore\n        hdKey.publicKey = pubKey;\n        // @ts-ignore\n        hdKey.chainCode = chainCode;\n\n        let hd = bip32.fromBase58(hdKey.publicExtendedKey);\n\n        return hd;\n    }\n\n    /**\n     * Returns a HDKey instance for the given account index.\n     * @param eth Eth hw app instance\n     * @param accountIndex\n     * @return HDKey Returned HD node is of derivation path `m/44'/60'/0'/0/n` where `n` is the account index.\n     */\n    static async getEvmAccount(eth: Eth, accountIndex = 0): Promise<HDKey> {\n        if (accountIndex < 0) throw new Error('Account index must be >= 0');\n\n        //TODO: Use account derivation path instead of address\n        let ethRes = await eth.getAddress(ETH_ACCOUNT_PATH, true, true);\n        let hdEth = new HDKey();\n        // @ts-ignore\n        hdEth.publicKey = Buffer.from(ethRes.publicKey, 'hex');\n        // @ts-ignore\n        hdEth.chainCode = Buffer.from(ethRes.chainCode, 'hex');\n\n        const acctPath = `m/0/${accountIndex}`;\n        return hdEth.derive(acctPath);\n    }\n\n    /**\n     * Returns the extended public key used by C chain for address derivation.\n     * @remarks Returns the extended public key for path `m/44'/60'/0'`. This key can be used to derive C chain accounts.\n     * @param transport\n     */\n    static async getExtendedPublicKeyEth(transport: any): Promise<string> {\n        const ethApp = LedgerWallet.getAppEth(transport);\n        let ethRes = await ethApp.getAddress(ETH_ACCOUNT_PATH, true, true);\n        let hdEth = new HDKey();\n        // @ts-ignore\n        hdEth.publicKey = Buffer.from(ethRes.publicKey, 'hex');\n        // @ts-ignore\n        hdEth.chainCode = Buffer.from(ethRes.chainCode, 'hex');\n        return hdEth.publicExtendedKey;\n    }\n\n    /**\n     * Returns the extended public key used by X and P chains for address derivation.\n     * @remarks Returns the extended public key for path `m/44'/90000'/n'` where `n` is the account index.\n     * @param transport\n     * @param accountIndex Which account's public key to derive\n     */\n    static async getExtendedPublicKeyAxc(transport: any, accountIndex = 0): Promise<string> {\n        const app = LedgerWallet.getAppAxc(transport);\n\n        let res = await app.getWalletExtendedPublicKey(getAccountPathAxia(accountIndex));\n\n        let pubKey = res.public_key;\n        let chainCode = res.chain_code;\n\n        // Get the base58 publick key from the HDKey instance\n        let hdKey = new HDKey();\n        // @ts-ignore\n        hdKey.publicKey = pubKey;\n        // @ts-ignore\n        hdKey.chainCode = chainCode;\n\n        return hdKey.publicExtendedKey;\n    }\n\n    static getAppAxc(transport: any) {\n        return new AppAxc(transport, 'w0w');\n    }\n\n    static getAppEth(transport: any) {\n        return new Eth(transport, 'w0w');\n    }\n\n    static async fromApp(app: AppAxc, eth: Eth): Promise<LedgerWallet> {\n        let axcAccount = await LedgerWallet.getAxcAccount(app, 0);\n        let evmAccount = await LedgerWallet.getEvmAccount(eth, 0);\n        let config = await app.getAppConfiguration();\n        //@ts-ignore\n        return new LedgerWallet(axcAccount, evmAccount, app, eth, config);\n    }\n\n    getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    getEvmAddressBech(): string {\n        let keypair = new EVMKeyPair(axia.getHRP(), 'C');\n        //@ts-ignore\n        let addr = keypair.addressFromPublicKey(Buffer.from(this.evmAccount.publicKey));\n        return bintools.addressToString(axia.getHRP(), 'C', addr);\n    }\n\n    async signEvm(tx: Transaction): Promise<Transaction> {\n        const rawUnsignedTx = rlp.encode([\n            bnToRlp(tx.nonce),\n            bnToRlp(tx.gasPrice),\n            bnToRlp(tx.gasLimit),\n            tx.to !== undefined ? tx.to.buf : Buffer.from([]),\n            bnToRlp(tx.value),\n            tx.data,\n            bnToRlp(tx.common.chainIdBN()),\n            Buffer.from([]),\n            Buffer.from([]),\n        ]);\n        //TODO: Use account derivation path instead of address\n        const signature = await this.ethApp.signTransaction(LEDGER_ETH_ACCOUNT_PATH, rawUnsignedTx.toString('hex'));\n\n        const signatureBN = {\n            v: new EthBN(signature.v, 16),\n            r: new EthBN(signature.r, 16),\n            s: new EthBN(signature.s, 16),\n        };\n\n        const chainId = await web3.eth.getChainId();\n        const networkId = await web3.eth.net.getId();\n\n        let common = EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul');\n        const chainParams: TxOptions = {\n            //@ts-ignore\n            common,\n        };\n\n        const signedTx = Transaction.fromTxData(\n            {\n                nonce: tx.nonce,\n                gasPrice: tx.gasPrice,\n                gasLimit: tx.gasLimit,\n                to: tx.to,\n                value: tx.value,\n                data: tx.data,\n                ...signatureBN,\n            },\n            chainParams\n        );\n        return signedTx;\n    }\n\n    // Returns an array of derivation paths that need to sign this transaction\n    // Used with signTransactionHash and signTransactionParsable\n    async getTransactionPaths<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx>(\n        unsignedTx: UnsignedTx,\n        chainId: ChainIdType\n    ): Promise<{ paths: string[]; isAxcOnly: boolean }> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n\n        let ins = tx.getIns();\n        let operations: TransferableOperation[] = [];\n\n        // Try to get operations, it will fail if there are none, ignore and continue\n        try {\n            operations = (tx as OperationTx).getOperations();\n        } catch (e) {\n            console.log('Failed to get tx operations.');\n        }\n\n        let items = ins;\n        if (\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P')\n        ) {\n            items = ((tx as AVMImportTx) || PlatformImportTx).getImportInputs();\n        }\n\n        let hrp = axia.getHRP();\n        let paths: string[] = [];\n\n        let isAxcOnly = true;\n        // Collect paths derivation paths for source addresses\n        for (let i = 0; i < items.length; i++) {\n            let item = items[i];\n\n            let assetId = bintools.cb58Encode(item.getAssetID());\n            // @ts-ignore\n            // if (assetId !== store.state.Assets.AVA_ASSET_ID) {\n            if (assetId !== activeNetwork.axcID) {\n                isAxcOnly = false;\n            }\n\n            let sigidxs: SigIdx[] = item.getInput().getSigIdxs();\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\n            let addrs: string[] = sources.map((source) => {\n                return bintools.addressToString(hrp, chainId, source);\n            });\n\n            for (let j = 0; j < addrs.length; j++) {\n                let srcAddr = addrs[j];\n                let pathStr = await this.getPathFromAddress(srcAddr); // returns change/index\n\n                paths.push(pathStr);\n            }\n        }\n\n        // Do the Same for operational inputs, if there are any...\n        for (let i = 0; i < operations.length; i++) {\n            let op = operations[i];\n            let sigidxs: SigIdx[] = op.getOperation().getSigIdxs();\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\n            let addrs: string[] = sources.map((source) => {\n                return bintools.addressToString(hrp, chainId, source);\n            });\n\n            for (let j = 0; j < addrs.length; j++) {\n                let srcAddr = addrs[j];\n                let pathStr = await this.getPathFromAddress(srcAddr); // returns change/index\n\n                paths.push(pathStr);\n            }\n        }\n\n        return { paths, isAxcOnly };\n    }\n\n    async getPathFromAddress(address: string) {\n        let externalAddrs = await this.externalScan.getAllAddresses();\n        let internalAddrs = await this.internalScan.getAllAddresses();\n        let platformAddrs = await this.externalScan.getAllAddresses('P');\n\n        let extIndex = externalAddrs.indexOf(address);\n        let intIndex = internalAddrs.indexOf(address);\n        let platformIndex = platformAddrs.indexOf(address);\n\n        if (extIndex >= 0) {\n            return `0/${extIndex}`;\n        } else if (intIndex >= 0) {\n            return `1/${intIndex}`;\n        } else if (platformIndex >= 0) {\n            return `0/${platformIndex}`;\n        } else if (address[0] === 'C') {\n            return '0/0';\n        } else {\n            throw new Error('Unable to find source address.');\n        }\n    }\n\n    async signX(unsignedTx: AVMUnsignedTx): Promise<AVMTx> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n        let chainId: ChainIdType = 'X';\n\n        let parseableTxs = ParseableAvmTxEnum;\n        let { paths, isAxcOnly } = await this.getTransactionPaths<AVMUnsignedTx>(unsignedTx, chainId);\n\n        // If ledger doesnt support parsing, sign hash\n        let canLedgerParse = this.config.version >= '0.3.1';\n        let isParsableType = txType in parseableTxs && isAxcOnly;\n\n        let signedTx;\n        if (canLedgerParse && isParsableType) {\n            signedTx = await this.signTransactionParsable<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\n        } else {\n            signedTx = await this.signTransactionHash<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\n        }\n\n        return signedTx;\n    }\n\n    getChangePath(chainId?: ChainAlias): string {\n        switch (chainId) {\n            case 'P':\n                return 'm/0';\n            case 'X':\n            default:\n                return 'm/1';\n        }\n    }\n\n    getChangeIndex(chainId?: ChainAlias): number {\n        switch (chainId) {\n            case 'P':\n                // return this.platformHelper.hdIndex\n                return this.externalScan.getIndex();\n            case 'X':\n            default:\n                // return this.internalHelper.hdIndex\n                return this.internalScan.getIndex();\n        }\n    }\n\n    getChangeBipPath<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\n        unsignedTx: UnsignedTx,\n        chainId: ChainIdType\n    ) {\n        if (chainId === 'C') {\n            return null;\n        }\n\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n\n        const chainChangePath = this.getChangePath(chainId).split('m/')[1];\n        let changeIdx = this.getChangeIndex(chainId);\n        // If change and destination paths are the same\n        // it can cause ledger to not display the destination amt.\n        // Since platform helper does not have internal/external\n        // path for change (it uses the external index)\n        // there will be address collisions. So return null.\n        if (\n            txType === PlatformVMConstants.IMPORTTX ||\n            txType === PlatformVMConstants.EXPORTTX ||\n            txType === PlatformVMConstants.ADDVALIDATORTX ||\n            txType === PlatformVMConstants.ADDDELEGATORTX\n        ) {\n            return null;\n        }\n\n        return bippath.fromString(`${AXC_ACCOUNT_PATH}/${chainChangePath}/${changeIdx}`);\n    }\n\n    // Used for signing transactions that are parsable\n    async signTransactionParsable<\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\n        SignedTx extends AVMTx | PlatformTx | EVMTx\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n        let parseableTxs = {\n            X: ParseableAvmTxEnum,\n            P: ParseablePlatformEnum,\n            C: ParseableEvmTxEnum,\n        }[chainId];\n\n        let title = `Sign ${parseableTxs[txType]}`;\n\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\n\n        const accountPath =\n            chainId === 'C' ? bippath.fromString(`${ETH_ACCOUNT_PATH}`) : bippath.fromString(`${AXC_ACCOUNT_PATH}`);\n        let txbuff = unsignedTx.toBuffer();\n        let changePath = this.getChangeBipPath(unsignedTx, chainId);\n        //@ts-ignore\n        let ledgerSignedTx = await this.appAxc.signTransaction(accountPath, bip32Paths, txbuff, changePath);\n\n        let sigMap = ledgerSignedTx.signatures;\n        let creds = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\n\n        let signedTx;\n        switch (chainId) {\n            case 'X':\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\n                break;\n            case 'P':\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\n                break;\n            case 'C':\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\n                break;\n        }\n\n        return signedTx as SignedTx;\n    }\n\n    // Used for non parsable transactions.\n    // Ideally we wont use this function at all, but ledger is not ready yet.\n    async signTransactionHash<\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\n        SignedTx extends AVMTx | PlatformTx | EVMTx\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\n        let txbuff = unsignedTx.toBuffer();\n        const msg: Buffer = Buffer.from(createHash('sha256').update(txbuff).digest());\n\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\n\n        // Sign the msg with ledger\n        //TODO: Update when ledger supports Accounts\n        const accountPathSource = chainId === 'C' ? ETH_ACCOUNT_PATH : AXC_ACCOUNT_PATH;\n        const accountPath = bippath.fromString(accountPathSource);\n        //@ts-ignore\n        let sigMap = await this.appAxc.signHash(accountPath, bip32Paths, msg);\n\n        let creds: Credential[] = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\n\n        let signedTx;\n        switch (chainId) {\n            case 'X':\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\n                break;\n            case 'P':\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\n                break;\n            case 'C':\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\n                break;\n        }\n\n        return signedTx as SignedTx;\n    }\n\n    pathsToUniqueBipPaths(paths: string[]) {\n        let uniquePaths = paths.filter((val: any, i: number) => {\n            return paths.indexOf(val) === i;\n        });\n\n        let bip32Paths = uniquePaths.map((path) => {\n            return bippath.fromString(path, false);\n        });\n\n        return bip32Paths;\n    }\n\n    getCredentials<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\n        unsignedTx: UnsignedTx,\n        paths: string[],\n        sigMap: any,\n        chainId: ChainIdType\n    ): Credential[] {\n        let creds: Credential[] = [];\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n\n        // @ts-ignore\n        let ins = tx.getIns ? tx.getIns() : [];\n        let operations: TransferableOperation[] = [];\n        let evmInputs: EVMInput[] = [];\n\n        let items = ins;\n        if (\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P') ||\n            (txType === EVMConstants.IMPORTTX && chainId === 'C')\n        ) {\n            items = ((tx as AVMImportTx) || PlatformImportTx || EVMImportTx).getImportInputs();\n        }\n\n        // Try to get operations, it will fail if there are none, ignore and continue\n        try {\n            operations = (tx as OperationTx).getOperations();\n        } catch (e) {\n            console.log('Failed to get tx operations.');\n        }\n\n        let CredentialClass;\n        if (chainId === 'X') {\n            CredentialClass = AVMSelectCredentialClass;\n        } else if (chainId === 'P') {\n            CredentialClass = PlatformSelectCredentialClass;\n        } else {\n            CredentialClass = EVMSelectCredentialClass;\n        }\n\n        // Try to get evm inputs, it will fail if there are none, ignore and continue\n        try {\n            evmInputs = (tx as EVMExportTx).getInputs();\n        } catch (e) {\n            console.log('Failed to get EVM inputs.');\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const sigidxs: SigIdx[] = items[i].getInput().getSigIdxs();\n            const cred: Credential = CredentialClass(items[i].getInput().getCredentialID());\n\n            for (let j = 0; j < sigidxs.length; j++) {\n                let pathIndex = i + j;\n                let pathStr = paths[pathIndex];\n\n                let sigRaw = sigMap.get(pathStr);\n                let sigBuff = Buffer.from(sigRaw);\n                const sig: Signature = new Signature();\n                sig.fromBuffer(sigBuff);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n\n        for (let i = 0; i < operations.length; i++) {\n            let op = operations[i].getOperation();\n            const sigidxs: SigIdx[] = op.getSigIdxs();\n            const cred: Credential = CredentialClass(op.getCredentialID());\n\n            for (let j = 0; j < sigidxs.length; j++) {\n                let pathIndex = items.length + i + j;\n                let pathStr = paths[pathIndex];\n\n                let sigRaw = sigMap.get(pathStr);\n                let sigBuff = Buffer.from(sigRaw);\n                const sig: Signature = new Signature();\n                sig.fromBuffer(sigBuff);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n\n        for (let i = 0; i < evmInputs.length; i++) {\n            let evmInput = evmInputs[i];\n            const sigidxs: SigIdx[] = evmInput.getSigIdxs();\n            const cred: Credential = CredentialClass(evmInput.getCredentialID());\n\n            for (let j = 0; j < sigidxs.length; j++) {\n                let pathIndex = items.length + i + j;\n                let pathStr = paths[pathIndex];\n\n                let sigRaw = sigMap.get(pathStr);\n                let sigBuff = Buffer.from(sigRaw);\n                const sig: Signature = new Signature();\n                sig.fromBuffer(sigBuff);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n\n        return creds;\n    }\n\n    async signP(unsignedTx: PlatformUnsignedTx): Promise<PlatformTx> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n        let chainId: ChainIdType = 'P';\n        let parseableTxs = ParseablePlatformEnum;\n\n        let { paths, isAxcOnly } = await this.getTransactionPaths<PlatformUnsignedTx>(unsignedTx, chainId);\n        // If ledger doesnt support parsing, sign hash\n        let canLedgerParse = this.config.version >= '0.3.1';\n        let isParsableType = txType in parseableTxs && isAxcOnly;\n\n        // TODO: Remove after ledger is fixed\n        // If UTXOS contain lockedStakeable funds always use sign hash\n        let txIns = unsignedTx.getTransaction().getIns();\n        for (let i = 0; i < txIns.length; i++) {\n            let typeID = txIns[i].getInput().getTypeID();\n            if (typeID === PlatformVMConstants.STAKEABLELOCKINID) {\n                canLedgerParse = false;\n                break;\n            }\n        }\n\n        // TODO: Remove after ledger update\n        // Ledger is not able to parse P/C atomic transactions\n        if (txType === PlatformVMConstants.EXPORTTX) {\n            const destChainBuff = (tx as PlatformExportTx).getDestinationChain();\n            // If destination chain is C chain, sign hash\n            const destChain = idToChainAlias(bintools.cb58Encode(destChainBuff));\n            if (destChain === 'C') {\n                canLedgerParse = false;\n            }\n        }\n        // TODO: Remove after ledger update\n        // Ledger is not able to parse P/C atomic transactions\n        if (txType === PlatformVMConstants.IMPORTTX) {\n            const sourceChainBuff = (tx as PlatformImportTx).getSourceChain();\n            // If destination chain is C chain, sign hash\n            const sourceChain = idToChainAlias(bintools.cb58Encode(sourceChainBuff));\n            if (sourceChain === 'C') {\n                canLedgerParse = false;\n            }\n        }\n\n        let signedTx;\n        if (canLedgerParse && isParsableType) {\n            signedTx = await this.signTransactionParsable<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\n        } else {\n            signedTx = await this.signTransactionHash<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\n        }\n        return signedTx;\n    }\n\n    async signC(unsignedTx: EVMUnsignedTx): Promise<EVMTx> {\n        // TODO: Might need to upgrade paths array to:\n        //  paths = Array(utxoSet.getAllUTXOs().length).fill('0/0'),\n        let tx = unsignedTx.getTransaction();\n        let typeId = tx.getTxType();\n\n        let paths = ['0/0'];\n        if (typeId === EVMConstants.EXPORTTX) {\n            let ins = (tx as EVMExportTx).getInputs();\n            paths = ins.map(() => '0/0');\n        } else if (typeId === EVMConstants.IMPORTTX) {\n            let ins = (tx as EVMImportTx).getImportInputs();\n            paths = ins.map(() => '0/0');\n        }\n\n        let canLedgerParse = true;\n\n        // TODO: Remove after ledger update\n        // Ledger is not able to parse P/C atomic transactions\n        if (typeId === EVMConstants.EXPORTTX) {\n            const destChainBuff = (tx as EVMExportTx).getDestinationChain();\n            // If destination chain is C chain, sign hash\n            const destChain = idToChainAlias(bintools.cb58Encode(destChainBuff));\n            if (destChain === 'P') {\n                canLedgerParse = false;\n            }\n        }\n        // TODO: Remove after ledger update\n        if (typeId === EVMConstants.IMPORTTX) {\n            const sourceChainBuff = (tx as EVMImportTx).getSourceChain();\n            // If destination chain is C chain, sign hash\n            const sourceChain = idToChainAlias(bintools.cb58Encode(sourceChainBuff));\n            if (sourceChain === 'P') {\n                canLedgerParse = false;\n            }\n        }\n\n        let txSigned;\n        if (canLedgerParse) {\n            txSigned = (await this.signTransactionParsable(unsignedTx, paths, 'C')) as EVMTx;\n        } else {\n            txSigned = (await this.signTransactionHash(unsignedTx, paths, 'C')) as EVMTx;\n        }\n\n        return txSigned;\n    }\n}\n","import { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx } from '@zee-ava/avajs/dist/apis/evm';\nimport { UnsignedTx as PlatformUnsignedTx, Tx as PlatformTx } from '@zee-ava/avajs/dist/apis/platformvm';\nimport { UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from '@zee-ava/avajs/dist/apis/avm';\nimport { Transaction } from '@ethereumjs/tx';\nimport { WalletNameType } from '@/Wallet/types';\nimport EvmWallet from '@/Wallet/EvmWallet';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport * as bip32 from 'bip32';\nimport { importPublic } from 'ethereumjs-util';\n\nexport default class PublicMnemonicWallet extends HDWalletAbstract {\n    /**\n     *\n     * @param xpubAVM of derivation path m/44'/9000'/0'\n     * @param xpubEVM of derivation path m/44'/60'/0'\n     */\n    constructor(xpubAVM: string, xpubEVM: string) {\n        let avmAcct = bip32.fromBase58(xpubAVM);\n        let evmAcct = bip32.fromBase58(xpubEVM).derivePath('0/0');\n        super(avmAcct);\n\n        this.type = 'xpub';\n\n        this.evmWallet = new EvmWalletReadonly(importPublic(evmAcct.publicKey));\n    }\n\n    evmWallet: EvmWallet | EvmWalletReadonly;\n    type: WalletNameType;\n\n    getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    getEvmAddressBech(): string {\n        return this.evmWallet.getAddressBech32();\n    }\n\n    //@ts-ignore\n    signC(tx: EVMUnsignedTx): Promise<EVMTx> {\n        throw new Error('Not supported.');\n    }\n\n    //@ts-ignore\n    signEvm(tx: Transaction): Promise<Transaction> {\n        throw new Error('Not supported.');\n    }\n    //@ts-ignore\n    signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\n        throw new Error('Not supported.');\n    }\n\n    //@ts-ignore\n    signX(tx: AVMUnsignedTx): Promise<AVMTx> {\n        throw new Error('Not supported.');\n    }\n}\n","import { Buffer } from 'buffer/';\nimport createHash from 'create-hash';\n\n/**\n * @ignore\n */\n\n/**\n * Helper utility for encryption and password hashing, browser-safe.\n * Encryption is using AES-GCM with a random public nonce.\n */\nexport default class CryptoHelpers {\n    protected ivSize = 12;\n\n    protected saltSize = 16;\n\n    protected tagLength = 128;\n\n    protected aesLength = 256;\n\n    public keygenIterations = 200000; //3.0, 2.0 uses 100000\n\n    /**\n     * Internal-intended function for cleaning passwords.\n     *\n     * @param password\n     * @param salt\n     */\n    _pwcleaner(password: string, slt: Buffer): Buffer {\n        const pw: Buffer = Buffer.from(password, 'utf8');\n        return this.sha256(Buffer.concat([pw, slt]));\n    }\n    /**\n     * Internal-intended function for producing an intermediate key.\n     *\n     * @param pwkey\n     */\n\n    async _keyMaterial(pwkey: Buffer): Promise<CryptoKey> {\n        return crypto.subtle.importKey('raw', new Uint8Array(pwkey), { name: 'PBKDF2' }, false, ['deriveKey']);\n    }\n\n    /**\n     * Internal-intended function for turning an intermediate key into a salted key.\n     *\n     * @param keyMaterial\n     * @param salt\n     */\n    async _deriveKey(keyMaterial: CryptoKey, salt: Buffer): Promise<CryptoKey> {\n        return crypto.subtle.deriveKey(\n            {\n                name: 'PBKDF2',\n                salt,\n                iterations: this.keygenIterations,\n                hash: 'SHA-256',\n            },\n            keyMaterial,\n            { name: 'AES-GCM', length: this.aesLength },\n            false,\n            ['encrypt', 'decrypt']\n        );\n    }\n\n    /**\n     * A SHA256 helper function.\n     *\n     * @param message The message to hash\n     *\n     * @returns A {@link https://github.com/feross/buffer|Buffer} containing the SHA256 hash of the message\n     */\n    sha256(message: string | Buffer): Buffer {\n        let buff: Buffer;\n        if (typeof message === 'string') {\n            buff = Buffer.from(message, 'utf8');\n        } else {\n            buff = Buffer.from(message);\n        }\n        return Buffer.from(createHash('sha256').update(buff).digest()); // ensures correct Buffer class is used\n    }\n\n    /**\n     * Generates a randomized {@link https://github.com/feross/buffer|Buffer} to be used as a salt\n     */\n    makeSalt(): Buffer {\n        const salt = Buffer.alloc(this.saltSize);\n        crypto.getRandomValues(salt);\n        return salt;\n    }\n\n    /**\n     * Produces a password-safe hash.\n     *\n     * @param password A string for the password\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} containing a salt used in the password hash\n     *\n     * @returns An object containing the \"salt\" and the \"hash\" produced by this function, both as {@link https://github.com/feross/buffer|Buffer}.\n     */\n    async pwhash(password: string, salt: Buffer): Promise<{ salt: Buffer; hash: Buffer }> {\n        let slt: Buffer;\n        if (salt instanceof Buffer) {\n            slt = salt;\n            // @ts-ignore\n        } else if (salt instanceof Uint8Array && process.env.NODE_ENV === 'test') {\n            slt = salt;\n        } else {\n            slt = this.makeSalt();\n        }\n\n        const hash: Buffer = this._pwcleaner(password, this._pwcleaner(password, slt));\n        return { salt: slt, hash };\n    }\n\n    /**\n     * Encrypts plaintext with the provided password using AES-GCM.\n     *\n     * @param password A string for the password\n     * @param plaintext The plaintext to encrypt\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} for the salt to use in the encryption process\n     *\n     * @returns An object containing the \"salt\", \"iv\", and \"ciphertext\", all as {@link https://github.com/feross/buffer|Buffer}.\n     */\n    async encrypt(\n        password: string,\n        plaintext: Buffer | string,\n        salt: Buffer | undefined = undefined\n    ): Promise<{ salt: Buffer; iv: Buffer; ciphertext: Buffer }> {\n        let slt: Buffer;\n        if (typeof salt !== 'undefined' && salt instanceof Buffer) {\n            slt = salt;\n        } else {\n            slt = this.makeSalt();\n        }\n\n        let pt: Buffer;\n        if (typeof plaintext !== 'undefined' && plaintext instanceof Buffer) {\n            pt = plaintext;\n        } else {\n            pt = Buffer.from(plaintext, 'utf8');\n        }\n        const pwkey: Buffer = this._pwcleaner(password, slt);\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, slt);\n        const iv: Buffer = Buffer.from(crypto.getRandomValues(new Uint8Array(this.ivSize)));\n\n        const ciphertext: Buffer = Buffer.from(\n            await crypto.subtle.encrypt(\n                {\n                    name: 'AES-GCM',\n                    iv,\n                    additionalData: slt,\n                    tagLength: this.tagLength,\n                },\n                pkey,\n                pt\n            )\n        );\n\n        return {\n            salt: slt,\n            iv,\n            ciphertext,\n        };\n    }\n\n    /**\n     * Decrypts ciphertext with the provided password, iv, and salt.\n     *\n     * @param password A string for the password\n     * @param ciphertext A {@link https://github.com/feross/buffer|Buffer} for the ciphertext\n     * @param salt A {@link https://github.com/feross/buffer|Buffer} for the salt\n     * @param iv A {@link https://github.com/feross/buffer|Buffer} for the iv\n     */\n    async decrypt(password: string, ciphertext: Buffer, salt: Buffer, iv: Buffer): Promise<Buffer> {\n        const pwkey: Buffer = this._pwcleaner(password, salt);\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, salt);\n\n        const pt: Buffer = Buffer.from(\n            await crypto.subtle.decrypt(\n                {\n                    name: 'AES-GCM',\n                    iv, // The initialization vector you used to encrypt\n                    additionalData: salt, // The addtionalData you used to encrypt (if any)\n                    tagLength: 128, // The tagLength you used to encrypt (if any)\n                },\n                pkey, // from generateKey or importKey above\n                ciphertext // ArrayBuffer of the data\n            )\n        );\n        return pt;\n    }\n\n    constructor() {}\n}\n","// Functions to manage import/export of keystore files\nimport {\n    AllKeyFileDecryptedTypes,\n    AllKeyFileTypes,\n    KeyFileDecryptedV2,\n    KeyFileDecryptedV3,\n    KeyFileDecryptedV4,\n    KeyFileDecryptedV5,\n    KeyFileDecryptedV6,\n    KeyFileKeyDecryptedV2,\n    KeyFileKeyDecryptedV3,\n    KeyFileKeyDecryptedV4,\n    KeyFileKeyDecryptedV5,\n    KeyFileKeyDecryptedV6,\n    KeyFileKeyV2,\n    KeyFileKeyV3,\n    KeyFileKeyV4,\n    KeyFileKeyV5,\n    KeyFileKeyV6,\n    KeyFileV2,\n    KeyFileV3,\n    KeyFileV4,\n    KeyFileV5,\n    KeyFileV6,\n    KeystoreFileKeyType,\n} from './types';\nimport { xChain } from '@/Network/network';\nimport { Buffer } from 'buffer/';\nimport MnemonicWallet from '@/Wallet/MnemonicWallet';\nimport Crypto from './Crypto';\nimport SingletonWallet from '@/Wallet/SingletonWallet';\nimport { AccessWalletMultipleInput } from './types';\n// import { keyToKeypair } from '@/helpers/helper'\nimport * as bip39 from 'bip39';\nimport { bintools } from '@/common';\nimport { Buffer as AjsBuffer } from '@zee-ava/avajs';\n\nconst cryptoHelpers = new Crypto();\n\nconst KEYSTORE_VERSION = '6.0';\n\nconst ITERATIONS_V2 = 100000;\nconst ITERATIONS_V3 = 200000; // and any version above\n\nconst SUPPORTED_VERSION = ['2.0', '3.0', '4.0', '5.0', '6.0'];\n\ninterface IHash {\n    salt: Buffer;\n    hash: Buffer;\n}\n\ninterface PKCrypt {\n    salt: Buffer;\n    iv: Buffer;\n    ciphertext: Buffer;\n}\n\nasync function readV2(data: KeyFileV2, pass: string) {\n    const version: string = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V2;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash: string = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: Buffer = await cryptoHelpers._pwcleaner(pass, salt);\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash));\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV2[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV2[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV2 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = bintools.cb58Encode(AjsBuffer.from(key_decrypt));\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\nasync function readV3(data: KeyFileV3, pass: string) {\n    const version: string = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash: string = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash.hash));\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV3[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV3[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV3 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = bintools.cb58Encode(AjsBuffer.from(key_decrypt));\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\nasync function readV4(data: KeyFileV4, pass: string): Promise<KeyFileDecryptedV5> {\n    const version = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash: string = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash.hash));\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV4[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV4[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV4 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = bintools.cb58Encode(AjsBuffer.from(key_decrypt));\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\n\nasync function readV5(data: KeyFileV5, pass: string): Promise<KeyFileDecryptedV5> {\n    const version: string = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\n    checkHashString = bintools.cb58Encode(AjsBuffer.from(checkHash.hash));\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV5[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV5[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV5 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = key_decrypt.toString();\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\n\nasync function readV6(data: KeyFileV6, pass: string): Promise<KeyFileDecryptedV6> {\n    const version: string = data.version;\n    const activeIndex = data.activeIndex;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n\n    let keys: KeyFileKeyV6[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV6[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV6 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let type: KeystoreFileKeyType = key_data.type;\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer;\n        try {\n            key_decrypt = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        } catch (e) {\n            throw 'INVALID_PASS';\n        }\n\n        const key_string = key_decrypt.toString();\n\n        keysDecrypt.push({\n            key: key_string,\n            type: type,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: activeIndex || 0,\n        keys: keysDecrypt,\n    };\n}\n\n/**\n * Will decrypt and return the keys of the encrypted wallets in the given json file\n * @param data A JSON file of encrypted wallet keys\n * @param pass The password to decrypt the keys\n */\nasync function readKeyFile(data: AllKeyFileTypes, pass: string): Promise<AllKeyFileDecryptedTypes> {\n    switch (data.version) {\n        case '6.0':\n            return await readV6(data as KeyFileV6, pass);\n        case '5.0':\n            return await readV5(data as KeyFileV5, pass);\n        case '4.0':\n            return await readV4(data as KeyFileV4, pass);\n        case '3.0':\n            return await readV3(data as KeyFileV3, pass);\n        case '2.0':\n            return await readV2(data as KeyFileV2, pass);\n        default:\n            throw 'INVALID_VERSION';\n    }\n}\n\nfunction extractKeysV2(\n    file: KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4\n): AccessWalletMultipleInput[] {\n    let chainID = xChain.getBlockchainAlias();\n    let keys = (file as KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4).keys;\n\n    return keys.map((key) => {\n        // Private keys from the keystore file do not have the PrivateKey- prefix\n        let pk = 'PrivateKey-' + key.key;\n        // let keypair = keyToKeypair(pk, chainID)\n        let keypair = xChain.newKeyChain().importKey(pk);\n\n        let keyBuf = keypair.getPrivateKey();\n        let keyHex: string = keyBuf.toString('hex');\n        let paddedKeyHex = keyHex.padStart(64, '0');\n        let mnemonic: string = bip39.entropyToMnemonic(paddedKeyHex);\n\n        return {\n            key: mnemonic,\n            type: 'mnemonic',\n        };\n    });\n}\n\nfunction extractKeysV5(file: KeyFileDecryptedV5): AccessWalletMultipleInput[] {\n    return file.keys.map((key) => ({\n        key: key.key,\n        type: 'mnemonic',\n    }));\n}\n\nfunction extractKeysV6(file: KeyFileDecryptedV6): AccessWalletMultipleInput[] {\n    return file.keys.map((key) => ({\n        type: key.type,\n        key: key.key,\n    }));\n}\n\nfunction extractKeysFromDecryptedFile(file: AllKeyFileDecryptedTypes): AccessWalletMultipleInput[] {\n    switch (file.version) {\n        case '6.0':\n            return extractKeysV6(file as KeyFileDecryptedV6);\n        case '5.0':\n            return extractKeysV5(file as KeyFileDecryptedV5);\n        case '4.0':\n            return extractKeysV2(file as KeyFileDecryptedV4);\n        case '3.0':\n            return extractKeysV2(file as KeyFileDecryptedV3);\n        case '2.0':\n            return extractKeysV2(file as KeyFileDecryptedV2);\n        default:\n            throw 'INVALID_VERSION';\n    }\n}\n\n/**\n * Given an array of wallets, the active index, and a password, return an encrypted JSON object that is the keystore file\n * @param wallets An array of wallet to encrypt\n * @param pass Password used in encryption\n * @param activeIndex Index of the active wallet in the `wallets` array\n * @return Returns a JSON object that can later be decrypted with `readKeyfile` and the given password\n */\nasync function makeKeyfile(\n    wallets: (MnemonicWallet | SingletonWallet)[],\n    pass: string,\n    activeIndex: number\n): Promise<KeyFileV6> {\n    // 3.0 and above uses 200,000\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = await cryptoHelpers.makeSalt();\n\n    let keys: KeyFileKeyV6[] = [];\n\n    for (let i = 0; i < wallets.length; i++) {\n        let wallet = wallets[i];\n        let key;\n        let type: KeystoreFileKeyType;\n        if (wallet.type === 'singleton') {\n            key = (wallet as SingletonWallet).key;\n            type = 'singleton';\n        } else {\n            key = (wallet as MnemonicWallet).mnemonic;\n            type = 'mnemonic';\n        }\n        let pk_crypt: PKCrypt = await cryptoHelpers.encrypt(pass, key, salt);\n\n        let key_data: KeyFileKeyV6 = {\n            key: bintools.cb58Encode(AjsBuffer.from(pk_crypt.ciphertext)),\n            iv: bintools.cb58Encode(AjsBuffer.from(pk_crypt.iv)),\n            type: type,\n        };\n        keys.push(key_data);\n    }\n\n    let file_data: KeyFileV6 = {\n        version: KEYSTORE_VERSION,\n        salt: bintools.cb58Encode(AjsBuffer.from(salt)),\n        activeIndex,\n        keys: keys,\n    };\n    return file_data;\n}\n\nexport default { readKeyFile, makeKeyfile, KEYSTORE_VERSION, extractKeysFromDecryptedFile };\n"],"names":["Defaults","global","this","util","querystring","require$$0","require$$1","require$$2","BinTools","axios","Axia","Web3","url","URL","Sockette","PubSub","ethers","xss","BN","eventsModule","events","EventEmitter","createHash","PayloadTypes","BufferAxia","Big","AVMConstants","Assets.getAssetDescription","publicToAddress","EVMKeyPair","privateToPublic","EVMKeyChain","MinterSet","OutputOwners","Common","tx","FeeMarketEIP1559Transaction","Transaction","EthereumjsCommon","PlatformVMConstants","EVMConstants","EVMInput","SECPTransferOutput","TransferableOutput","ExportTx","UnsignedTx","costExportTx","AVMUTXOSet","PlatformUTXOSet","Buffer","UnixNow","getPreferredHRP","AVMKeyPair","bip39","bip32","importPublic","HDKey","AppAxc","Eth","rlp","bnToRlp","EthBN","PlatformImportTx","bippath","AVMTx","PlatformTx","EVMTx","EVMImportTx","AVMSelectCredentialClass","PlatformSelectCredentialClass","EVMSelectCredentialClass","Signature","Crypto","AjsBuffer"],"mappings":"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"}